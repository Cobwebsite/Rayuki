
export class Login extends Aventus.WebComponent implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables

    @ViewElement()
    private usernameEl!: HTMLInputElement;
    @ViewElement()
    private passwordEl!: HTMLInputElement;
    @ViewElement()
    private formEl!: HTMLFormElement;
    @ViewElement()
    private submitBtn!: HTMLInputElement;

    @Property()
    private error: string = "";
    //#endregion


    //#region constructor

    //#endregion


    //#region methods

    /**
     * 
     */
    protected loginAction(e: Event) {
        e.preventDefault();
        e.stopPropagation();
        this.login(e);
        return false;
    }
    /**
     * 
     */
    protected async login(e: Event) {
        let body = {
            username: this.usernameEl.value,
            password: this.passwordEl.value
        };
        let formData = new FormData();
        formData.append("username", this.usernameEl.value);
        formData.append("password", this.passwordEl.value);

        const router = new Core.Routes.MainRouter();
        let result = await router.LoginAction(body);
        if(result.success) {
            window.location.pathname = "/";
        }
        else {
            for(let error of result.errors) {
                if(error instanceof Core.Errors.LoginError) {
                    if(error.code == Core.Errors.LoginCode.WrongCredentials) {
                        this.error = "Les informations fournies sont erronÃ©es";
                        console.log("Wrong credentials");
                    }
                    else {
                        this.error = error.message;
                        console.log(error);
                    }
                }
                else {
                    this.error = error.message;
                    // console.log(error);
                }
            }
        }
    }

    /**
     * 
     */
    protected clearError() {
        this.formEl.style.transform = "";
        this.error = "";
    }


    /**
     * 
     */
    protected validateForm() {
        this.submitBtn.click();
    }

    /**
     * 
     */
    protected moving3d() {

        let XAngle = 0;
        let YAngle = 0;
        let Z = 0;

        const onMove = (e: PointerEvent | MouseEvent) => {
            var box = this.formEl.getBoundingClientRect();
            var XRel = e.pageX - box.left;
            var YRel = e.pageY - box.top;
            var size = box.width;

            YAngle = -(0.5 - (XRel / size)) * 10;
            XAngle = (0.5 - (YRel / size)) * 10;

            const max = 15;
            if(XAngle < max * -1) XAngle = max * -1;
            else if(XAngle > max) XAngle = max;

            if(YAngle < max * -1) YAngle = max * -1;
            else if(YAngle > max) YAngle = max;

            this.formEl.style.transform = "perspective(1000px) translateZ(" + Z + "px) rotateX(" + XAngle + "deg) rotateY(" + YAngle + "deg)";
        };
        if(Core.Lib.Platform.device == "pc") {
            this.addEventListener("mousemove", (e) => onMove(e));
        }
        else {
            new Aventus.DragAndDrop({
                element: this,
                offsetDrag: 0,
                onMove: (e) => {
                    onMove(e)
                },
                applyDrag: false
            });
        }
    }


    protected override postCreation(): void {
        super.postCreation();
        this.moving3d();
        this.appendChild(this.usernameEl);
        this.appendChild(this.passwordEl);
    }
    //#endregion

}