import type { ApplicationQueryFctResult } from "../../Application/ApplicationError.lib.avt";
import type { Application } from "../../Application/Application.wcl.avt";

namespace System {
    export abstract class FrameNoScroll extends Aventus.WebComponent implements Aventus.DefaultComponent {
        //#region static

        //#endregion


        //#region props
        @Property((target: FrameNoScroll) => {
            if(target.visible) {
                target.onShow();
            }
            else {
                target.onHide();
            }
        })
        private visible!: boolean;

        //#endregion


        //#region variables
        protected state?: Aventus.State;
        public application!: Application;

        /** Only use to reset element inside the application router */
        @Internal()
        public resetNavElement!: () => void;
        //#endregion


        //#region constructor
        constructor() {
            super();
            this.addFadeIn();
        }
        //#endregion


        //#region methods
        protected addFadeIn() {
            this.style.setProperty("--local-frame-animation-delay", "200ms");
            this.addEventListener("animationend", (e) => {
                if(e.animationName == "fadeIn") {
                    this.style.removeProperty("--local-frame-animation-delay");
                }
            });
        }

        public abstract pageTitle(): string;

        public async show(state: Aventus.State | undefined): Promise<void> {
            this.state = state;
            this.visible = true;
        }
        public async hide(): Promise<void> {
            this.visible = false;
        }
        public abstract onShow();
        public abstract onHide();


        public async askChange(newState: Aventus.State): Promise<boolean> {
            return true;
        }

        public async execute<X>(prom: Promise<ApplicationQueryFctResult<X>>): Promise<X | undefined> {
            return this.application.execute(prom);
        }
        public async executeWithLoading<X>(prom: Promise<ApplicationQueryFctResult<X>>): Promise<X | undefined> {
            return this.application.executeWithLoading(prom);
        }

        //#endregion
    }
}