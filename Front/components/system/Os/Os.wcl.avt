import { AppList } from "../AppList/AppList.wcl.avt";
import { ApplicationRAM } from "../../../ram/Application.ram.avt";
import { ContextMenu } from "../../ui/ContextMenu/ContextMenu.wcl.avt";
import { ShortcutManager, SpecialTouch } from "../../../libs/ShortcutManager.lib.avt";
import { DesktopRAM } from "../../../ram/Desktop.ram.avt";
import type { DesktopData } from "../../../libs/TypeMapper.lib.avt";
import type { Desktop } from "../Desktop/Desktop.wcl.avt";
import type { Scrollable } from "../../ui/layout/Scrollable/Scrollable.wcl.avt";
import { Confirm, type ConfirmInfo } from "../../ui/popup/Confirm/Confirm.wcl.avt";
import type { PopupInfo } from "../../ui/popup/Popup/Popup.wcl.avt";
import { Alert, type AlertInfo } from "../../ui/popup/Alert/Alert.wcl.avt";
import { ApplicationManager } from "../../../libs/ApplicationManager.lib.avt";
import { DesktopStateManager } from "../../../states/desktop/Desktop.state.avt";
import { Pointer } from "../../../libs/Pointer.lib.avt";
import { Platform } from "../../../libs/Platform.lib.avt";
import { MainEndPoint } from "../../../generated/Websocket/MainEndPoint.lib.avt";
import type { GenericPopup } from "../../ui/popup/GenericPopup/GenericPopup.wcl.avt";
import { NotificationManager } from "../../ui/popup/NotificationManager/NotificationManager.wcl.avt";
import type { Notification } from "../../ui/popup/Notification/Notification.wcl.avt";
import { TransactionManager } from "../../../libs/TransactionManager.lib.avt";
import { AppInstallPanel } from "../AppInstallPanel/AppInstallPanel.wcl.avt";
import { PWA } from "../../../libs/Pwa.lib.avt";
import { Application } from "../Application/Application.wcl.avt";

namespace System {
    export class Os extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static
        public static instance: Os;
        public static get version(): number {
            return coreVersion;
        }
        //#endregion


        //#region props
        @Attribute()
        public loading: boolean = false;

        @Property((target: Os) => {
            target.onShowDesktopList();
        })
        public desktop_list: boolean = false;

        @Property((target: Os) => {
            if(target.appList)
                target.appList.show = target.show_application_list;
            for(let desktop of target.desktopsEl) {
                desktop.show_application_list = target.show_application_list;
            }
        })
        public show_application_list: boolean = false;

        @Attribute()
        public ready: boolean = false;

        @Attribute()
        public no_connection!: boolean;

        @Property((target: Os) => {
            target.onActiveDesktop();
        })
        public active_desktop: number = 0;
        //#endregion


        //#region variables
        @Watch()
        public desktops: DesktopData[] = [];

        @ViewElement()
        public appList!: AppList;

        @ViewElement()
        public readonly desktopsEl!: Desktop[];

        @ViewElement()
        protected desktopContainerScroll!: Scrollable;

        @ViewElement()
        private notificationManager!: NotificationManager;

        protected activeDesktopEl!: Desktop;
        public get activeDesktop(): Desktop {
            return this.activeDesktopEl;
        }

        private contextMenuCst: new (...args) => ContextMenu = ContextMenu;
        //#endregion


        //#region constructor
        public constructor() {
            super();
            Os.instance = this;
            ApplicationManager.reloadData();
        }
        //#endregion


        //#region methods

        //#region desktop
        private onActiveDesktop() {
            this.style.setProperty("--_active-desktop", this.active_desktop + "");
            if(this.activeDesktopEl) {
                this.activeDesktopEl.is_active = false;
                this.activeDesktopEl.parentElement?.classList.remove("active");
            }
            this.activeDesktopEl = this.desktopsEl[this.active_desktop];
            if(this.activeDesktopEl) {
                this.activeDesktopEl.is_active = true;
                this.activeDesktopEl.parentElement?.classList.add("active");
            }
        }

        @BindThis()
        private desktopMoveLeft() {
            if(this.active_desktop - 1 < 0) {
                this.active_desktop = this.desktops.length - 1;
            }
            else {
                this.active_desktop--;
            }
        }
        @BindThis()
        private desktopMoveRight() {
            if(this.active_desktop + 1 == this.desktops.length) {
                this.active_desktop = 0;
            }
            else {
                this.active_desktop++;
            }
        }
        @BindThis()
        private desktopMoveValidate() {
            this.desktop_list = false;
        }

        private onShowDesktopList() {
            if(this.isReady) {
                this.desktopContainerScroll.y_scroll = this.desktop_list;
                this.desktopContainerScroll.disable = !this.desktop_list;
            }
            DesktopStateManager.getInstance().setState("/");
            if(this.desktop_list) {
                ShortcutManager.subscribe([SpecialTouch.ArrowRight], this.desktopMoveRight);
                ShortcutManager.subscribe([SpecialTouch.ArrowLeft], this.desktopMoveLeft);
                ShortcutManager.subscribe([SpecialTouch.Enter], this.desktopMoveValidate);
                ShortcutManager.subscribe([SpecialTouch.Escape], this.desktopMoveValidate);
            }
            else {
                ShortcutManager.unsubscribe([SpecialTouch.ArrowRight], this.desktopMoveRight);
                ShortcutManager.unsubscribe([SpecialTouch.ArrowLeft], this.desktopMoveLeft);
                ShortcutManager.unsubscribe([SpecialTouch.Enter], this.desktopMoveValidate);
                ShortcutManager.unsubscribe([SpecialTouch.Escape], this.desktopMoveValidate);
            }
        }
        private addSwitchDesktop() {
            ShortcutManager.subscribe([SpecialTouch.Shift, SpecialTouch.Tab], () => {
                this.desktop_list = true;
            });
        }

        /**
         * 
         */
        protected async deleteDesktop(e: Event, instance: Aventus.PressManager) {
            if(this.desktops.length <= 1) {
                await this.alert({
                    title: "Impossible de supprimer le bureau",
                    description: "Il vous faut au minimum un bureau actif"
                });
            }
            else if(await this.confirm({
                title: "Suppression d'un bureau",
                description: "Etes-vous sÃ»r de vouloir supprimer ce bureau?"
            })) {
                let id = Number((instance.getElement() as HTMLElement).dataset.id);
                await DesktopRAM.getInstance().deleteById(id);
            }
        }

        protected async syncDesktopData() {
            this.desktops = await DesktopRAM.getInstance().getList();
            this.onActiveDesktop();
            DesktopRAM.getInstance().onDeleted((el) => {
                for(let i = 0; i < this.desktops.length; i++) {
                    if(this.desktops[i].Id == el.Id) {
                        this.desktops.splice(i, 1);
                        if(this.active_desktop == i) {
                            this.active_desktop = 0;
                            if(i == 0) {
                                this.onActiveDesktop();
                            }
                        }
                        else if(this.active_desktop > i) {
                            this.active_desktop--;
                        }
                        return;
                    }
                }


            });
            DesktopRAM.getInstance().onCreated((el) => {
                this.desktops.push(el);
            });
        }

        //#endregion

        private async systemLoading() {
            const minDelay = 3000;
            let start: Date | undefined;
            let timeout = setTimeout(() => {
                start = new Date();
                this.loading = true;
            }, 200);
            await ApplicationRAM.getInstance().getAll();
            await this.syncDesktopData();
            clearTimeout(timeout);
            if(start) {
                let now = new Date();
                let diffMs = now.getTime() - start.getTime();
                if(diffMs < minDelay) {
                    await Aventus.sleep(minDelay - diffMs);
                }
            }
            this.loading = false;
            this.ready = true;
        }

        public async openUrl(application: string, componentUrl: string = "/", url: string | Aventus.State = "/") {
            this.activeDesktopEl.openUrl(application, componentUrl, url);
        }
        public async unHideApplication(application: string, componentUrl: string = "/") {
            await this.activeDesktopEl.unHideApplication(application, componentUrl);
        }

        public notify(notification: Notification) {
            return this.notificationManager.notify(notification);
        }

        private rightClick() {
            this.addEventListener("contextmenu", (e) => {
                e.preventDefault();
                const isTouch = Pointer.isTouch(e);
                const menu = new this.contextMenuCst();
                menu.init(e.pageX, e.pageY, isTouch, this);
            });

            if(Platform.isiOS) {
                let startX;
                let startY;
                let lastX;
                let lastY;
                let timeoutContext;
                Aventus.PressManager.setGlobalConfig({
                    onEvent: (e) => {
                        if(e.type == "pointerdown") {
                            lastX = startX = e.pageX;
                            lastY = startY = e.pageY;
                            timeoutContext = setTimeout(() => {
                                let diffX = startX - lastX;
                                let diffY = startY - lastY;
                                if(diffX * diffX + diffY * diffY < 200) {
                                    const menu = new this.contextMenuCst();
                                    menu.init(e.pageX, e.pageY, true, this);
                                }

                            }, 700);
                        }
                        else if(e.type == "pointerup") {
                            clearTimeout(timeoutContext);
                        }
                        else if(e.type == "pointermove") {
                            lastX = e.pageX;
                            lastY = e.pageY;
                        }
                    }
                });
                // new Aventus.PressManager({
                //     element: this,
                //     delayLongPress: 500,
                //     onLongPress: (e) => {
                //         const menu = new this.contextMenuCst();
                //         menu.init(e.pageX, e.pageY, true, this);
                //     }
                // });
            }
        }
        private preventScroll() {
            document.body.addEventListener("scroll", (e) => {
                document.body.scrollTop = 0;
                document.body.scrollLeft = 0;
            });
        }
        public setContextMenu(contextMenuCst: new (...args) => ContextMenu) {
            this.contextMenuCst = contextMenuCst;
        }
        public setDefaultContextMenu() {
            this.contextMenuCst = ContextMenu;
        }


        //#region popup
        @BindThis()
        public popup<T extends GenericPopup<U, X>, U = any, X extends PopupInfo = PopupInfo>(p: T): Promise<U> {
            return new Promise<U>((resolve) => {
                p.init((response) => {
                    resolve(response);
                });
                this.shadowRoot.appendChild(p);
            });
        }
        @BindThis()
        public async alert(info: Partial<AlertInfo>) {
            const a = new Alert();
            a.mergeInfo(info);
            await this.popup(a);
        }
        @BindThis()
        public async confirm(info: Partial<ConfirmInfo>) {
            const c = new Confirm();
            c.mergeInfo(info);
            return await this.popup(c);
        }
        //#endregion

        private _appInstallPanel?: AppInstallPanel;
        protected allowInstallApp() {
            ShortcutManager.subscribe([SpecialTouch.Control, SpecialTouch.Alt, "i"], () => {
                if(this._appInstallPanel) {
                    this._appInstallPanel.remove();
                    this._appInstallPanel = undefined;
                }
                else {
                    let panel = new AppInstallPanel();
                    this._appInstallPanel = panel;
                    panel.onClose.add(() => {
                        this._appInstallPanel = undefined;
                    });
                    this.shadowRoot.appendChild(panel);
                }
            });
        }
        /**
         * 
         */
        protected selectDesktop(e: Event, pressInstance: Aventus.PressManager) {
            let el = pressInstance.getElement();
            let index = Number(el.getAttribute("index"));
            this.active_desktop = index;
            setTimeout(() => {
                this.desktop_list = false;
            }, 100);
        }

        protected addResizeObserver() {
            new Aventus.ResizeObserver(() => {
                this.style.setProperty("--ration", Platform.getRatio(this));
                this.style.setProperty("--os-width", this.offsetWidth + 'px');
                this.style.setProperty("--os-height", this.offsetHeight + 'px');
            }).observe(this);

            window.visualViewport?.addEventListener('resize', () => {
                // setTimeout(() => {
                //     console.log(window.scrollY);

                // }, 1000)
                // window.scrollTo(0, 0);
                // document.body.scrollTop = 0;
            });
        }

        private manageOffline() {
            let timeout: number;
            let interval: number;
            let fetchNb = 0;
            const pingIndex = async () => {
                try {
                    // it's for server is up but you aren't connected
                    await fetch("/");
                    fetchNb++;
                    if(fetchNb == 2) {
                        window.location.reload();
                    }
                } catch(e) {

                }
            };
            const startPing = () => {
                fetchNb = 0;
                clearInterval(interval);
                this.no_connection = true;
                interval = setInterval(() => {
                    pingIndex();
                }, 5000);
            };
            const stopPing = () => {
                this.no_connection = false;
                clearInterval(interval);
            };
            Platform.onDisconnect.add(() => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    startPing();
                }, 6000);
            });

            Platform.onReconnect.add(() => {
                clearTimeout(timeout);
                stopPing();
            });
        }

        private async startSocket() {
            this.manageOffline();
            AventusSharp.WebSocket.Connection.Debug = true;
            await MainEndPoint.getInstance().open();
            ApplicationManager.init();
            TransactionManager.init();
        }

        private trapInOs() {
            window.history.pushState({ _fileexplorer: 'back' }, document.title);
            window.history.pushState({ _fileexplorer: 'main' }, document.title);
            window.history.pushState({ _fileexplorer: 'forward' }, document.title);
            window.history.back();

            window.addEventListener('popstate', (e) => {
                if(e.state && e.state._fileexplorer) {
                    if(e.state._fileexplorer === 'back') {
                        window.history.forward();
                        let element = this.activeDesktopEl.activeElement;
                        if(element instanceof Application) {
                            element.navigatePrevious();
                        }
                    }
                    else if(e.state._fileexplorer === 'forward') {
                        window.history.back();
                        let element = this.activeDesktopEl.activeElement;
                        if(element instanceof Application) {
                            element.navigateNext();
                        }
                    }
                }
            }, true);
        }

        private async init() {
            Aventus.PressManager.setGlobalConfig({
                delayDblPress: 250,
                delayLongPress: 700,
                offsetDrag: 20
            });
            this.trapInOs();
            this.addResizeObserver();
            await this.startSocket();
            Platform.init();
            this.rightClick();
            this.preventScroll();
            this.addSwitchDesktop();
            this.allowInstallApp();
            await this.systemLoading();
            PWA.init();
        }

        protected override postCreation(): void {
            super.postCreation();
            this.init();
        }
        //#endregion

}
}