import { Os } from "../Os.wcl.avt";
import type { Notification, NotificationPosition } from "./Notification.wcl.avt";

namespace System {
    export class NotificationManager {
        private activeNotifications: {
            top: Notification[],
            left: Notification[],
            bottom: Notification[],
            right: Notification[],
        } = {
                top: [],
                left: [],
                bottom: [],
                right: [],
            };

        private waitingNotifications: {
            top: Notification[],
            left: Notification[],
            bottom: Notification[],
            right: Notification[],
        } = {
                top: [],
                left: [],
                bottom: [],
                right: [],
            };

        private os: Os;

        public constructor(os: Os) {
            this.os = os;
        }


        public async notify(notification: Notification): Promise<boolean> {
            this.os.shadowRoot.appendChild(notification);
            if(notification.position == "bottom") {
                return this._notifyBottom(notification, true);
            }
            else if(notification.position == "left") {
                return this._notifyLeft(notification, true);
            }
            else if(notification.position == "right") {
                return this._notifyRight(notification, true);
            }
            else if(notification.position == "top") {
                return this._notifyTop(notification, true);
            }
            return false;
        }


        private _notifyRight(notification: Notification, firstTime: boolean, from: number = 0) {
            return new Promise<boolean>((resolve) => {

                let height = notification.offsetHeight;
                let position: NotificationPosition = "right";

                const _remove = (result: boolean) => {
                    let index = this.activeNotifications[position].indexOf(notification);
                    if(index > -1) {
                        this.activeNotifications[position].splice(index, 1);
                    }
                    if(this.waitingNotifications[position].length > 0) {
                        let nextNotif = this.waitingNotifications[position].splice(0, 1)[0];
                        this._notifyRight(nextNotif, false, index);
                    }
                    else {
                        let bodyHeight = document.body.offsetHeight;
                        for(let i = 0; i < index; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom - height - 20 + 'px';
                        }
                    }
                    resolve(result);
                };

                let length = this.activeNotifications[position].length;
                if(length == 0) {
                    this.activeNotifications[position].push(notification);
                    notification.show(_remove);
                }
                else {
                    let bodyHeight = document.body.offsetHeight;
                    let totHeight = 0;
                    for(let notif of this.activeNotifications[position]) {
                        totHeight += notif.offsetHeight + 20;
                    }
                    if(totHeight + height < bodyHeight / 2) {
                        for(let i = from; i < this.activeNotifications[position].length; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom + height + 20 + 'px';
                        }

                        this.activeNotifications[position].push(notification);
                        notification.show(_remove);
                    }
                    else if(firstTime) {
                        this.waitingNotifications[position].push(notification);
                    }
                }
            });

        }

        private _notifyLeft(notification: Notification, firstTime: boolean, from: number = 0) {
            return new Promise<boolean>((resolve) => {
                let height = notification.offsetHeight;
                let position: NotificationPosition = "left";

                const _remove = (result: boolean) => {
                    let index = this.activeNotifications[position].indexOf(notification);
                    if(index > -1) {
                        this.activeNotifications[position].splice(index, 1);
                    }
                    if(this.waitingNotifications[position].length > 0) {
                        let nextNotif = this.waitingNotifications[position].splice(0, 1)[0];
                        this._notifyLeft(nextNotif, false, index);
                    }
                    else {
                        let bodyHeight = document.body.offsetHeight;
                        for(let i = 0; i < index; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom - height - 20 + 'px';
                        }
                    }
                    resolve(result);
                };

                let length = this.activeNotifications[position].length;
                if(length == 0) {
                    this.activeNotifications[position].push(notification);
                    notification.show(_remove);
                }
                else {
                    let bodyHeight = document.body.offsetHeight;
                    let totHeight = 0;
                    for(let notif of this.activeNotifications[position]) {
                        totHeight += notif.offsetHeight + 20;
                    }
                    if(totHeight + height < bodyHeight / 2) {
                        for(let i = from; i < this.activeNotifications[position].length; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom + height + 20 + 'px';
                        }

                        this.activeNotifications[position].push(notification);
                        notification.show(_remove);
                    }
                    else if(firstTime) {
                        this.waitingNotifications[position].push(notification);
                    }
                }
            });
        }

        private _notifyTop(notification: Notification, firstTime: boolean, from: number = 0) {
            return new Promise<boolean>((resolve) => {
                let height = notification.offsetHeight;
                let position: NotificationPosition = "top";

                const _remove = (result: boolean) => {
                    let index = this.activeNotifications[position].indexOf(notification);
                    if(index > -1) {
                        this.activeNotifications[position].splice(index, 1);
                    }
                    if(this.waitingNotifications[position].length > 0) {
                        let nextNotif = this.waitingNotifications[position].splice(0, 1)[0];
                        this._notifyTop(nextNotif, false, index);
                    }
                    else {
                        for(let i = 0; i < index; i++) {
                            let notif = this.activeNotifications[position][i];
                            let top = notif.offsetTop;
                            notif.style.top = top - height - 20 + 'px';
                        }
                    }
                    resolve(result);
                };

                let length = this.activeNotifications[position].length;
                if(length == 0) {
                    this.activeNotifications[position].push(notification);
                    notification.show(_remove);
                }
                else {
                    let bodyHeight = document.body.offsetHeight;
                    let totHeight = 0;
                    for(let notif of this.activeNotifications[position]) {
                        totHeight += notif.offsetHeight + 20;
                    }
                    if(totHeight + height < bodyHeight / 3) {
                        for(let i = from; i < this.activeNotifications[position].length; i++) {
                            let notif = this.activeNotifications[position][i];
                            let top = notif.offsetTop;
                            notif.style.top = top + height + 20 + 'px';
                        }

                        this.activeNotifications[position].push(notification);
                        notification.show(_remove);
                    }
                    else if(firstTime) {
                        this.waitingNotifications[position].push(notification);
                    }
                }
            });
        }

        private _notifyBottom(notification: Notification, firstTime: boolean, from: number = 0) {
            return new Promise<boolean>((resolve) => {
                let height = notification.offsetHeight;
                let position: NotificationPosition = "bottom";

                const _remove = (result: boolean) => {
                    let index = this.activeNotifications[position].indexOf(notification);
                    if(index > -1) {
                        this.activeNotifications[position].splice(index, 1);
                    }
                    if(this.waitingNotifications[position].length > 0) {
                        let nextNotif = this.waitingNotifications[position].splice(0, 1)[0];
                        this._notifyBottom(nextNotif, false, index);
                    }
                    else {
                        let bodyHeight = document.body.offsetHeight;
                        for(let i = 0; i < index; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom - height - 20 + 'px';
                        }
                    }
                    resolve(result);
                };

                let length = this.activeNotifications[position].length;
                if(length == 0) {
                    this.activeNotifications[position].push(notification);
                    notification.show(_remove);
                }
                else {
                    let bodyHeight = document.body.offsetHeight;
                    let totHeight = 0;
                    for(let notif of this.activeNotifications[position]) {
                        totHeight += notif.offsetHeight + 20;
                    }
                    if(totHeight + height < bodyHeight / 3) {
                        for(let i = from; i < this.activeNotifications[position].length; i++) {
                            let notif = this.activeNotifications[position][i];
                            let bottom = bodyHeight - (notif.offsetTop + notif.offsetHeight);
                            notif.style.bottom = bottom + height + 20 + 'px';
                        }

                        this.activeNotifications[position].push(notification);
                        notification.show(_remove);
                    }
                    else if(firstTime) {
                        this.waitingNotifications[position].push(notification);
                    }
                }
            });
        }

    }
}