import { Panel } from "../../Panel/Panel.wcl.avt";
import type { Scrollable } from "../../../ui/layout/Scrollable/Scrollable.wcl.avt";
import { SessionManager } from "../../../../libs/SessionManager.lib.avt";
import type { User } from "../../../../generated/Data/User.data.avt";
import { Desktop } from "../../Desktop/Desktop.wcl.avt";
import type { HomeBtn } from "../HomeBtn.wcl.avt";
import { ApplicationPermission, ApplicationPermissionQuery } from "../../../../generated/Permissions/ApplicationPermission.lib.avt";

namespace System {
    export class HomePanel extends Panel implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props

        //#endregion


        //#region variables
        @ViewElement()
        protected recentContainer!: Scrollable;

        @ViewElement()
        protected favorisContainer!: HTMLDivElement;

        @Watch()
        public currentUser?: User;

        public btn!: HomeBtn;
        //#endregion


        //#region constructor

        //#endregion


        //#region methods


        /**
         * 
         */
        protected async openProfil() {
            const canSettings = await can(new ApplicationPermissionQuery(ApplicationPermission.AllowAccess, "Settings"));
            if(canSettings) {
                let desktop = this.findParentByType(Desktop);
                if(desktop) {
                    desktop.openUrl("Settings", "/", "/profil");
                    this.btn.active = false;
                }
            }
        }


        /**
         * 
         */
        protected async logout() {
            SessionManager.logout();
        }


        private async displayRecent() {
            // for(let i = 0; i < 20; i++) {
            //     let test = new AppIconInline();
            //     let icon = Aventus.WebComponentInstance.create<AppIcon>("Cave.System.AppIcon");
            //     let app = await ApplicationRAM.getInstance().getApplicationByName("Cave");
            //     if(icon && app) {
            //         test.setIcon(icon);
            //         test.text = app.DisplayName;
            //     }

            //     this.recentContainer.appendChild(test);
            // }
        }

        private async displayFavoris() {
            // for(let i = 0; i < 20; i++) {
            //     let icon = Aventus.WebComponentInstance.create<AppIcon>("Cave.System.AppIcon");
            //     if(icon) {
            //         this.favorisContainer.appendChild(icon);
            //     }
            // }
        }

        private async getUser() {
            this.currentUser = await SessionManager.getUser();
        }


        protected override postCreation(): void {
            this.getUser();
            this.displayRecent();
            this.displayFavoris();
            new Aventus.PressManager({
                element: this,
                onPress: () => { },
                onDrag: () => { },
            });
        }
        //#endregion

    }
}