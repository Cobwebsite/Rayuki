import type { SizeList } from "../ApplicationSize.lib.avt";
import { Scrollable } from "../../../ui/layout/Scrollable/Scrollable.wcl.avt";
import { Frame } from "../../Frame/Frame.wcl.avt";
import { Application } from "../Application.wcl.avt";

namespace System {
    type ApplicationSidnavRouteOptions = {
        route: string,
        frame: new () => Frame,
        name: string,
        icon?: string,
        miIcon?: MaterialIcon.IconType,
        activeRoute?: string;
    };

    @OverrideView()
    export abstract class ApplicationSidnav extends Application implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        public hide_menu_size?: SizeList = "sm";
        @Attribute()
        public open_sidenav!: boolean;
        @Attribute()
        public no_sidenav!: boolean;
        //#endregion


        //#region variables
        @ViewElement()
        protected navEl!: Scrollable;

        @Watch()
        protected sidnavItems: { name: string, icon: string, useMi: boolean, route: string; active: string; }[] = [];


        //#endregion


        //#region constructor

        //#endregion


        //#region methods
        protected addRouteSidenav(options: ApplicationSidnavRouteOptions) {
            let route = options.route;
            this.allRoutes[route] = {
                route: route,
                scriptUrl: '',
                render: () => options.frame
            };
            let icon = "";
            let useMi = false;
            if(options.miIcon) {
                useMi = true;
                icon = options.miIcon;
            }
            else if(options.icon?.startsWith("mi-")) {
                useMi = true;
                icon = options.icon.replace("mi-", "");
            }
            else if(options.icon) {
                icon = options.icon;
            }
            this.sidnavItems.push({
                name: options.name,
                icon,
                useMi,
                route,
                active: options.activeRoute ?? route
            });


        }

        protected toggleSidnav() {
            this.open_sidenav = !this.open_sidenav;
        }
        protected closeSidenav() {
            this.open_sidenav = false;
        }
        //#endregion

    }
}