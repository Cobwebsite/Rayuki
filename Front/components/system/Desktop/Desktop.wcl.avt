import { Os } from "../Os/Os.wcl.avt";
import { DesktopRAM } from "../../../ram/Desktop.ram.avt";
import type { BottomBar } from "../BottomBar/BottomBar.wcl.avt";
import type { PageCase } from "../../ui/layout/PageCase/PageCase.wcl.avt";
import { PageCaseSlot } from "../../ui/layout/PageCase/PageCaseSlot/PageCaseSlot.wcl.avt";
import { Application } from "../Application/Application.wcl.avt";
import { ApplicationOpen } from "../../../generated/Data/ApplicationOpen.lib.avt";
import { ApplicationHistory } from "../Application/ApplicationHistory.lib.avt";
import { AppIconManager } from "../../../libs/AppIconManager.lib.avt";
import type { ContextMenu, IContextMenu } from "../../ui/ContextMenu/ContextMenu.wcl.avt";
import { MoveApplication, type MoveApplicationProvider } from "../../../states/desktop/MoveApplication.state.avt";
import { DesktopStateManager } from "../../../states/desktop/Desktop.state.avt";
import type { AppIcon } from "../AppIcon/AppIcon.wcl.avt";
import { BackgroundSize, DesktopAppIcon, DesktopLocation } from "../../../generated/Data/Desktop.data.avt";
import type { DesktopData } from "../../../libs/TypeMapper.lib.avt";
import { ApplicationManager } from "../../../libs/ApplicationManager.lib.avt";
import { Platform } from "../../../libs/Platform.lib.avt";
import type { IDesktopActivable } from "./IActivable.lib.avt";
import { DesktopRouter } from "../../../generated/Websocket/Routes/DesktopRouter.lib.avt";
import { ApplicationPermission, ApplicationPermissionQuery } from "../../../generated/Permissions/ApplicationPermission.lib.avt";
import { Notification } from "../../ui/popup/Notification/Notification.wcl.avt";
import { Addon } from "../../../libs/Addon.lib.avt";
import { ApplicationRAM } from "../../../ram/Application.ram.avt";

namespace System {
    export class Desktop extends Aventus.WebComponent implements Aventus.DefaultComponent, IContextMenu, MoveApplicationProvider {

        //#region static

        //#endregion


        //#region props
        @Property()
        public desktop_id!: number;

        @Attribute()
        public show_application_list!: boolean;

        /**
         * Determine if the desktop is the one visible on screen
         */
        @Attribute()
        public is_active!: boolean;

        @Attribute()
        public background_size: string = BackgroundSize[BackgroundSize.Cover];
        //#endregion


        //#region variables
        @ViewElement()
        protected bottomBar!: BottomBar;

        @ViewElement()
        protected pageCaseEl!: PageCase;

        @ViewElement()
        protected appContainer!: HTMLDivElement;

        @ViewElement()
        protected debugEl!: HTMLDivElement;

        @ViewElement()
        protected previewAutoLayout!: HTMLDivElement;


        public applications: { [name: string]: { [id: number]: Application; }; } = {};
        public data!: Aventus.RamItem<DesktopData>;

        private _iconSize: number = 0;
        public get iconSize(): number {
            return this._iconSize;
        }

        protected activableOrder: IDesktopActivable[] = [];
        public get activeElement(): IDesktopActivable | undefined {
            if(this.activableOrder.length == 0) return undefined;
            return this.activableOrder[0];
        }
        //#endregion


        //#region constructor
        public constructor() {
            super();
        }
        //#endregion


        //#region methods
        /**
         * @inheritdoc
         */
        public onContextMenu(contextMenu: ContextMenu, stop: () => void): void {
            if(Object.keys(this.applications).length > 0) {
                contextMenu.addItem({
                    text: "Recentrer les fenetres",
                    icon: "/img/icons/window-restore.svg",
                    priority: 2,
                    action: () => {
                        for(let name in this.applications) {
                            for(let id in this.applications[name]) {
                                this.applications[name][id].resetSize();
                            }
                        }
                    }
                });
            }
            if(Platform.isStandalone) {
                contextMenu.addItem({
                    text: "Recharger la page",
                    materialIcon: "refresh",
                    priority: 3,
                    action: () => {
                        window.location.reload();
                    }
                });
            }
            contextMenu.addItem({
                text: "Paramètres",
                materialIcon: "display_settings",
                action: () => {
                    this.openUrl("Settings", "/", "/display");
                }
            });

        }

        //#region application
        public async loadApp(application: string) {
            await Addon.loadForApp(application);
            const appInfo = await ApplicationRAM.getInstance().getApplicationByName(application);
            let version = "";
            if(appInfo) {
                version = "?v=" + appInfo.Version;
            }
            await Aventus.ResourceLoader.loadInHead({
                type: "js",
                url: "/apps/" + application + "/index.js" + version
            });
            await Aventus.ResourceLoader.loadInHead({
                type: "css",
                url: "/apps/" + application + "/default.css" + version
            });
        }
        public async openUrl(application: string, componentUrl: string = "/", url: string | Aventus.State = "/") {
            if(!(await can(new ApplicationPermissionQuery(ApplicationPermission.AllowAccess, application)))) {
                let notif = new Notification();
                notif.subject = "Erreur";
                notif.innerHTML = "Vous n'êtes pas autorisé à ouvrir l'application " + application;
                Os.instance.notify(notif);
                return;
            }
            Os.instance.show_application_list = false;
            await this.loadApp(application);

            let tagName = await AppIconManager.getTagName(application, componentUrl);
            let comp = Aventus.WebComponentInstance.create<Application>(tagName);
            if(comp) {
                if(!this.applications[comp.$type]) {
                    this.applications[comp.$type] = {};
                }
                let i = 0;
                while(this.applications[comp.$type][i]) {
                    i++;
                }
                comp.init({
                    applicationNumber: i,
                    desktopId: this.desktop_id,
                    desktop: this,
                });
                this.appContainer.appendChild(comp);
                comp.focus();
                this.setElementToActive(comp);

                await comp.navigate(url);

                this.applications[comp.$type][i] = comp;

                this.manageAppBottomBar(comp.$type);
            }
            else {
                let notif = new Notification();
                notif.subject = "Erreur";
                notif.innerHTML = "Impossible de trouver l'application " + application + " sur " + componentUrl;
                Os.instance.notify(notif);
            }
        }
        public async unHideApplication(application: string, componentUrl: string = "/") {
            let tagName = await AppIconManager.getTagName(application, componentUrl);
            let comp = Aventus.WebComponentInstance.create<Application>(tagName);
            if(!comp || !this.applications[comp.$type]) {
                return;
            }

            let allHidden = true;
            for(let nb in this.applications[comp.$type]) {
                if(!this.applications[comp.$type][nb].is_hidden) {
                    allHidden = false;
                    break;
                }
            }
            if(allHidden) {
                for(let nb in this.applications[comp.$type]) {
                    this.applications[comp.$type][nb].show();
                }
            }
            else {
                for(let nb in this.applications[comp.$type]) {
                    this.applications[comp.$type][nb].hide();
                }
            }
        }

        private async recreateApplications(applications?: ApplicationOpen[]) {
            if(!applications) {
                return;
            }

            for(let application of applications) {
                this.recreateApplication(application);
            }
        }
        public async recreateApplication(application: ApplicationOpen) {
            let applicationName = application.applicationName;
            if(!applicationName) {
                return;
            }
            let appName = applicationName?.split(".")[0];
            if(!(await can(new ApplicationPermissionQuery(ApplicationPermission.AllowAccess, appName)))) {
                let notif = new Notification();
                notif.subject = "Erreur";
                notif.innerHTML = "Vous n'êtes pas autorisé à ouvrir l'application " + appName;
                Os.instance.notify(notif);
                return;
            }
            await this.loadApp(appName);


            let comp = Aventus.WebComponentInstance.create<Application>(applicationName);
            if(comp) {
                if(!this.applications[applicationName]) {
                    this.applications[applicationName] = {};
                }
                let i = application.number;
                comp.init({
                    applicationNumber: i,
                    desktopId: this.desktop_id,
                    desktop: this
                });
                comp.focus();
                comp.is_hidden = application.isHidden;
                this.appContainer.appendChild(comp);
                await comp.setHistory(ApplicationHistory.fromText(comp.navigator, application.history));


                this.applications[comp.$type][i] = comp;
                this.manageAppBottomBar(comp.$type);
            }
        }
        public removeApp(application: Application) {
            const appNumber = application.options?.applicationNumber ?? -1;
            const type = application.$type;

            if(this.applications[type]) {
                delete this.applications[type][appNumber];
                if(Object.keys(this.applications[type]).length == 0) {
                    delete this.applications[type];
                }
            }

            this.manageAppBottomBar(type);
        }
        private manageAppBottomBar(type: string) {
            let splitted = type.split(".");
            let current: any = window;
            for(let part of splitted) {
                current = current[part];
            }
            if(current && current.prototype instanceof Aventus.WebComponent) {
                let icon = AppIconManager.getIcon(current.Tag);
                if(!icon) {
                    return;
                }
                const appContainer = this.bottomBar.applicationsContainer;
                if(!this.applications[type] || Object.keys(this.applications[type]).length == 0) {
                    let children = Array.from(appContainer.children);
                    for(let child of children) {
                        if(child instanceof icon) {
                            child.is_open = false;
                            if(child.classList.contains("remove-close")) {
                                child.remove();
                            }
                        }
                    }
                }
                else {
                    let children = Array.from(appContainer.children);
                    let found = false;
                    for(let child of children) {
                        if(child instanceof icon) {
                            child.is_open = true;
                            found = true;
                        }
                    }
                    if(found) {
                        return;
                    }
                    let iconTemp = new icon();
                    iconTemp.is_open = true;
                    iconTemp.classList.add("remove-close");
                    appContainer.append(iconTemp);
                }
            }


        }

        private showPreviewPositionTimeout?: number;
        public showPreviewPosition(location: ("left" | 'right' | 'bottom' | 'top')[]) {
            if(location.length == 0) {
                if(this.showPreviewPositionTimeout !== undefined)
                    clearTimeout(this.showPreviewPositionTimeout);
                this.previewAutoLayout.style.display = '';
                return;
            }
            let w, h, t, l = '';
            let aw, ah, at, al = '';
            if(location.includes("left")) {
                w = '50%';
                l = '0';
                h = '100%';
                t = '0';
                aw = '0';
                ah = '0';
                at = '0';
                al = '0';

                if(location.includes("top")) {
                    h = '50%';
                }
                else if(location.includes("bottom")) {
                    h = '50%';
                    t = '50%';
                    at = '100%';
                }
            }
            else if(location.includes("right")) {
                w = '50%';
                l = '50%';
                h = '100%';
                t = '0';
                aw = '0';
                ah = '0';
                at = '0';
                al = '100%';

                if(location.includes("top")) {
                    h = '50%';
                }
                else if(location.includes("bottom")) {
                    h = '50%';
                    t = '50%';
                    at = '100%';
                }
            }
            else {
                if(this.showPreviewPositionTimeout !== undefined)
                    clearTimeout(this.showPreviewPositionTimeout);
                this.previewAutoLayout.style.display = '';
                return;
            }

            if(this.showPreviewPositionTimeout !== undefined) return;

            if(this.previewAutoLayout.style.display == 'block') {
                this.previewAutoLayout.style.left = l;
                this.previewAutoLayout.style.top = t;
                this.previewAutoLayout.style.width = w;
                this.previewAutoLayout.style.height = h;
            }
            else {
                this.previewAutoLayout.style.display = 'block';
                this.previewAutoLayout.style.left = al;
                this.previewAutoLayout.style.top = at;
                this.previewAutoLayout.style.width = aw;
                this.previewAutoLayout.style.height = ah;
                this.showPreviewPositionTimeout = setTimeout(() => {
                    this.showPreviewPositionTimeout = undefined;
                    this.previewAutoLayout.style.left = l;
                    this.previewAutoLayout.style.top = t;
                    this.previewAutoLayout.style.width = w;
                    this.previewAutoLayout.style.height = h;
                }, 100);
            }
        }
        public getPreviewPosition() {
            if(this.previewAutoLayout.style.display == 'block') {
                const result = {
                    w: this.previewAutoLayout.offsetWidth,
                    h: this.previewAutoLayout.offsetHeight,
                    t: this.previewAutoLayout.offsetTop,
                    l: this.previewAutoLayout.offsetLeft
                };
                this.previewAutoLayout.style.display = '';
                return result;
            }
            return null;
        }
        //#endregion

        //#region desktop icons
        private oldActiveCase?: PageCaseSlot;
        private pressManagerStopMoveApp?: Aventus.PressManager;

        protected calculateIconSize() {
            let type = Platform.device;
            let iconSize: number = 75;
            if(type == "pc") {
                iconSize = this.data.Configuration.SizeDesktop;
            }
            else if(type == "tablet") {
                iconSize = this.data.Configuration.SizeTablet;
            }
            else if(type == "mobile") {
                iconSize = this.data.Configuration.SizeMobile;
            }
            this.setIconSize(iconSize);

        }
        public setIconSize(size: number) {
            this._iconSize = size;
            this.pageCaseEl.case_height = size;
            this.pageCaseEl.case_width = size;
        }

        @BindThis()
        public setAppPositionTemp(shadow: AppIcon, x: number, y: number) {
            let caseEl = this.pageCaseEl.shadowRoot.elementFromPoint(x, y);
            if(caseEl && this.pageCaseEl.shadowRoot.contains(caseEl)) {
                let pageCase = caseEl instanceof PageCaseSlot ? caseEl : Aventus.ElementExtension.findParentByType(caseEl, PageCaseSlot);

                if(this.oldActiveCase != caseEl) {
                    this.oldActiveCase?.classList.remove("active");

                    if(pageCase) {
                        if(this.pageCaseEl.getElementAt(pageCase.no) == null) {
                            this.oldActiveCase = pageCase;
                            pageCase.classList.add("active");
                            shadow.style.width = this.iconSize + 'px';
                            shadow.style.height = this.iconSize + 'px';
                        }
                    }
                    else {
                        this.oldActiveCase = undefined;
                    }
                }
            }

            return this.oldActiveCase ? true : false;
        }

        @BindThis()
        public clearAppPositionTemp(): void {
            this.oldActiveCase?.classList.remove("active");
        }

        @BindThis()
        public async setAppPosition(icon: AppIcon, x: number, y: number) {
            this.setAppPositionTemp(icon, x, y);
            if(this.oldActiveCase) {
                let no = this.oldActiveCase.no;
                icon.position = no;
                this.pageCaseEl.appendChild(icon);
                this.pageCaseEl.calculateGrid();
                let desktopIcon = new DesktopAppIcon();
                desktopIcon.DesktopId = this.desktop_id;
                desktopIcon.Position = no;
                desktopIcon.IconTag = icon.tag;
                desktopIcon.Location = DesktopLocation.Desktop;
                desktopIcon.Id = icon.iconId;
                this.oldActiveCase?.classList.remove("active");
                this.oldActiveCase = undefined;
                let result = await new DesktopRouter().SetDesktopIcon({
                    icon: desktopIcon
                });
                if(result.success && result.result) {
                    icon.iconId = result.result.Id;
                    icon.can_remove = true;
                }
            }
        }

        @BindThis()
        public async removeAppPosition(icon: AppIcon, x: number, y: number) {
            let caseEl = this.pageCaseEl.shadowRoot.elementFromPoint(x, y);
            if(caseEl && this.pageCaseEl.shadowRoot.contains(caseEl)) {
                let desktopIcon = new DesktopAppIcon();
                desktopIcon.Id = icon.iconId;
                let result = await new DesktopRouter().RemoveDesktopIcon({
                    icon: desktopIcon
                });
                if(result.success) {
                    this.pageCaseEl.removeElementAt(icon.position);
                }
            }
        }

        @StateActive(MoveApplication.state, DesktopStateManager)
        protected onMoveApplication(state: Aventus.State, slugs: Aventus.StateSlug) {
            if(!this.is_active) {
                return;
            }
            if(state instanceof MoveApplication) {
                state.registerProvider(this);
                this.pressManagerStopMoveApp?.destroy();
                this.pressManagerStopMoveApp = new Aventus.PressManager({
                    element: this,
                    onPress: () => {
                        state.resetState();
                    }
                });
            }
        }

        @StateInactive(MoveApplication.state, DesktopStateManager)
        protected onStopMovingApplication(state: Aventus.State, nextState: Aventus.State, slugs: Aventus.StateSlug) {
            if(!this.is_active) {
                return;
            }
            this.oldActiveCase?.classList.remove("active");
            this.oldActiveCase = undefined;

            this.pressManagerStopMoveApp?.destroy();
        }
        //#endregion

        //#region device watcher
        protected watchDevice() {
            Platform.onScreenChange.add((type) => {
                this.calculateIconSize();
            });
        }
        //#endregion

        //#region data
        private async applyDataChange() {
            this.style.backgroundImage = 'url("' + this.data.Configuration.Background.Uri + '")';
            this.style.backgroundColor = this.data.Configuration.BackgroundColor ?? '';
            this.background_size = BackgroundSize[this.data.Configuration.BackgroundSize];
            this.calculateIconSize();
        }
        private async loadData() {
            let data = await DesktopRAM.getInstance().getById(this.desktop_id);
            if(data) {
                this.data = data;
                this.applyDataChange();
                if(this.data.Configuration.SyncDesktop) {
                    this.recreateApplications(this.data.Applications);
                }
                else {
                    this.recreateApplications(ApplicationManager.getOpenApps(data.Id));
                }
                for(let icon of data.Icons) {
                    let el = Aventus.WebComponentInstance.create<AppIcon>(icon.IconTag);
                    if(el) {
                        el.iconId = icon.Id;
                        el.position = icon.Position;
                        el.can_remove = true;

                        if(icon.Location == DesktopLocation.Desktop) {
                            this.pageCaseEl.appendChild(el);
                        }
                        else if(icon.Location == DesktopLocation.BottomBar) {
                            this.bottomBar.setApplication(el);
                        }
                    }

                }
                this.pageCaseEl.calculateGrid();
                this.watchDevice();

                data.onUpdate(() => {
                    this.applyDataChange();
                });
            }

        }
        //#endregion

        //#region active order
        public setElementToActive(el: IDesktopActivable) {
            let index = this.activableOrder.indexOf(el);
            if(index != -1) {
                this.activableOrder.splice(index, 1);
            }
            this.activableOrder.splice(0, 0, el);
            this.applyActiveToElement();
        }
        public removeElementFromActive(el: IDesktopActivable) {
            let index = this.activableOrder.indexOf(el);
            if(index != -1) {
                this.activableOrder.splice(index, 1);
            }
            this.applyActiveToElement();
        }
        protected applyActiveToElement() {
            let total = 501 + this.activableOrder.length;
            let first = true;
            for(let el of this.activableOrder) {
                if(first) {
                    first = false;
                    el.is_desktop_active = true;
                }
                else {
                    el.is_desktop_active = false;
                }
                el.style.zIndex = total + '';
                total--;
            }
        }
        //#endregion

        protected addDebug() {
            const debugConsole = this.debugEl;

            // Function to append messages to the console
            function appendToConsole(message, type = 'log') {
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${(new Date()).getSeconds()} ${type.toUpperCase()}] ${message}`;
                debugConsole.appendChild(logEntry);
                debugConsole.scrollTop = debugConsole.scrollHeight; // Auto-scroll to the bottom
            }

            // Override console.log
            const originalLog = console.log;
            console.log = function (...args) {
                originalLog.apply(console, args); // Call the original console.log
                for(let i = 0; i < args.length; i++) {
                    if(typeof args[i] != 'string')
                        args[i] = JSON.stringify(args[i]);
                }
                appendToConsole(args.join(' '), 'log');
            };

            // Override console.error
            const originalError = console.error;
            console.error = function (...args) {
                originalError.apply(console, args); // Call the original console.error
                appendToConsole(args.join(' '), 'error');
            };

            // Override console.warn
            const originalWarn = console.warn;
            console.warn = function (...args) {
                originalWarn.apply(console, args); // Call the original console.warn
                appendToConsole(args.join(' '), 'warn');
            };
        }

        protected override postCreation(): void {
            this.loadData();
            // this.addDebug();
        }
        //#endregion
    }
}