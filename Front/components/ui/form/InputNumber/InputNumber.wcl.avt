import { FormElement } from "../FormElement/FormElement.wcl.avt";


namespace Components {
    @Storybook({
        export: 'public',
        group: 'Components/Form'
    })
    export class InputNumber extends FormElement<number> implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Property()
        public label?: string;
        @Property()
        public placeholder?: string;

        @Property()
        public icon?: string;

        @Watch((target: InputNumber) => {
            target.inputEl.value = target.value !== undefined ? target.value + '' : '';
        })
        public override value: number | undefined = undefined;

        @Property()
        public min!: number;

        @Property()
        public max!: number;

        @Property()
        public unit?: string;

        @Attribute()
        public readonly!: boolean;
        //#endregion


        //#region variables
        @ViewElement()
        protected inputEl!: HTMLInputElement;

        public errorsTxt: Partial<{
            notNumber: string;
            lowerThanMin: string,
            biggerThanMax: string;
        }> = {};

        protected defaultErrorsTxt: {
            notNumber: string;
            lowerThanMin: string,
            biggerThanMax: string;
        } = {
                notNumber: "Le nombre n'est pas valide",
                lowerThanMin: "Le nombre n'est pas plus grand que " + this.min,
                biggerThanMax: "Le nombre n'est pas plus petit que " + this.max,
            };

        //#endregion


        //#region constructor

        //#endregion

        //#region methods

        /**
         * 
         */
        protected removeErrors() {
            this.errors = [];
        }

        protected isNullNumber(): boolean {
            if(this.inputEl.value === '') return true;
            let valueTemp = Number(this.inputEl.value);
            if(!this.inputEl.value || isNaN(valueTemp)) {
                return false;
            }
            return true;
        }

        protected isBiggerThanMin(): boolean {
            if(this.value === undefined) return true;
            if(this.min != 0 || this.hasAttribute("min")) {
                return this.value >= this.min;
            }
            return true;
        }
        protected isLowerThanMax(): boolean {
            if(this.value === undefined) return true;
            if(this.max != 0 || this.hasAttribute("max")) {
                return this.value <= this.max;
            }
            return true;
        }

        protected localValidation(): string[] {
            let errors: string[] = [];
            if(!this.isNullNumber()) {
                const txt = this.errorsTxt.notNumber ?? this.defaultErrorsTxt.notNumber;
                errors.push(txt);
            }
            else if(!this.isBiggerThanMin()) {
                const txt = this.errorsTxt.lowerThanMin ?? this.defaultErrorsTxt.lowerThanMin;
                errors.push(txt);
            }
            else if(!this.isLowerThanMax()) {
                const txt = this.errorsTxt.biggerThanMax ?? this.defaultErrorsTxt.biggerThanMax;
                errors.push(txt);
            }
            return errors;
        }

        public override onFormValidation(errors: string[]): Aventus.Asyncable<string[]> {
            errors = [...this.localValidation(), ...errors];
            return super.onFormValidation(errors);
        }


        /**
         * 
         */
        public async validate(): Promise<boolean> {
            if(!this.formPart) {
                this.errors = this.localValidation();
                return this.errors.length == 0;
            }
            return await this.formPart.test();
        }
        /**
         * 
         */
        protected onValueChange() {
            if(!this.isNullNumber()) {
                return;
            }
            if(this.inputEl.value === '') {
                this.value = undefined;
            }
            else {
                this.value = Number(this.inputEl.value);
            }

            this.onChange.trigger([this.value]);
            if(this.formPart) {
                this.formPart.value.set(this.value);
            }
        }

        //#endregion

    }
}