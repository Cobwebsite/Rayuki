import { Scrollable } from "../../layout/Scrollable/Scrollable.wcl.avt";
import { FormElement } from "../FormElement/FormElement.wcl.avt";

namespace Components {
    @Storybook({
        export: 'public',
        group: 'Components/Form'
    })
    export class Slider extends FormElement<number> implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Property()
        public label?: string;
        @Property((target: Slider) => {
            target.calculatePercent();
        })
        public min: number = 0;
        @Property((target: Slider) => {
            target.calculatePercent();
        })
        public max: number = 100;
        @Property((target: Slider) => {
            target.calculatePercent();
        })
        public override value: number = 0;
        @Property()
        public step: number = 1;
        @Attribute()
        public popup: 'never' | 'always' | 'onMove' = 'never';


        //internal
        @Attribute()
        private no_transition!: boolean;
        @Attribute()
        private popup_visible!: boolean;

        //#endregion


        //#region variables
        @ViewElement()
        protected dotEl!: HTMLDivElement;

        @ViewElement()
        protected barEl!: HTMLDivElement;

        protected currentPercent: number = 0;
        protected timerPopup: number = 0;
        //#endregion


        //#region constructor

        //#endregion


        //#region events
        public onDragStart: Aventus.Callback<() => void> = new Aventus.Callback();
        public onDragStop: Aventus.Callback<() => void> = new Aventus.Callback();
        public onValidateValue: Aventus.Callback<(value:number) => number, number> = new Aventus.Callback();
        //#endregion

        //#region methods
        protected addMoveDot() {
            let startX: number = 0;
            let currentPosition: number = 0;
            new Aventus.DragAndDrop({
                element: this.dotEl,
                applyDrag: false,
                offsetDrag: 0,
                stopPropagation: false,
                onPointerDown: (e) => {
                    Scrollable.lock(this);
                    this.no_transition = true;
                    if(this.popup == "onMove") {
                        clearTimeout(this.timerPopup);
                        this.popup_visible = true;
                    }
                    this.onDragStart.trigger([]);
                },
                onStart: (e) => {
                    startX = e.pageX;
                    currentPosition = this.dotEl.offsetLeft;
                },
                onMove: (e) => {
                    let diff = startX - e.pageX;
                    let newPosition = currentPosition - diff;
                    let percent = newPosition / this.offsetWidth * 100;
                    this.setPercent(percent);
                    this.calculateValue();
                },
                onPointerUp: () => {
                    Scrollable.unlock(this);
                    this.no_transition = false;
                    if(this.popup == "onMove") {
                        this.timerPopup = setTimeout(() => {
                            this.popup_visible = false;
                        }, 1000);
                    }
                    this.onDragStop.trigger([]);
                }
            });
        }
        protected addClickBar() {
            new Aventus.PressManager({
                element: this.barEl,
                onPress: (e) => {
                    let left = this.getBoundingClientRect().left;
                    let newPosition = e.pageX - left;
                    let percent = newPosition / this.offsetWidth * 100;
                    this.setPercent(percent);
                    this.calculateValue();
                    if(this.popup == "onMove") {
                        clearTimeout(this.timerPopup);
                        this.timerPopup = setTimeout(() => {
                            this.popup_visible = false;
                        }, 1000);
                        this.popup_visible = true;
                    }
                }
            });
        }

        protected calculatePercent(value?:number) {
            if(!this.isConnected) return;
            if(value === undefined) {
                value = this.value;
            }
            let range = this.max - this.min;
            let percent = (value - this.min) / range * 100;
            this.setPercent(percent);
        }

        protected calculateValue(emit: boolean = true) {
            let range = this.max - this.min;
            let value = (range * this.currentPercent / 100) + this.min;
            let diff = value % this.step;
            if(diff > this.step / 2) {
                value += (this.step - diff);
            }
            else {
                value -= diff;
            }
            let result = this.onValidateValue.trigger([value]);
            if(result.length > 0) {
                if(result[0] != value) {
                    // we correct the value so apply percent
                    this.calculatePercent(result[0]);
                    value = result[0];
                }
            }
            if(value != this.value) {
                this.value = value;
                if(emit) {
                    this.onChange.trigger([value]);
                    if(this.formPart) {
                        this.formPart.value.set(this.value);
                    }
                }
            }
        }

        protected setPercent(percent: number) {
            if(percent < 0) {
                percent = 0;
            }
            else if(percent > 100) {
                percent = 100;
            }

            // correct step
            let range = this.max - this.min;
            let value = (range * percent / 100) + this.min;
            let diff = value % this.step;
            if(diff > this.step / 2) {
                value += (this.step - diff);
            }
            else {
                value -= diff;
            }
            percent = (value - this.min) / range * 100;

            this.currentPercent = percent;
            this.style.setProperty("--local-slider-dot-percent", percent + "%");
        }

        /**
         * 
         */
        protected removeErrors() {
            this.errors = [];
        }

        protected override postCreation(): void {
            super.postCreation();
            this.addMoveDot();
            this.addClickBar();
            this.calculatePercent();
            this.calculateValue(false);
            if(this.popup == 'always') {
                this.popup_visible = true;
            }
        }
        //#endregion

    }
}