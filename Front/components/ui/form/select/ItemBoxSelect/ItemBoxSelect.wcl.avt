import type { ItemBoxOption } from "./ItemBoxOption/ItemBoxOption.wcl.avt";
import { BoxContainer } from "../../../layout/BoxContainer/BoxContainer.wcl.avt";
import { FormElement } from "../../FormElement/FormElement.wcl.avt";
import type { Form } from "../../Form/Form.wcl.avt";

namespace Components {
    export class ItemBoxSelect extends FormElement<string> implements Aventus.DefaultComponent {

        //#region static

        //#endregion

        //#region props
        @Property((target: BoxContainer) => {
            target.style.setProperty("--item-box-margin", target.space + 'px');
        })
        public space: number = 0;
        //#endregion


        //#region variables
        /**
         * @inheritdoc
         */
        @Property((target: ItemBoxSelect) => {
            target.selectInternalOption();
        })
        public override value: string | undefined;

        protected options: ItemBoxOption[] = [];
        protected optionSelected?: ItemBoxOption;

        /**
         * @inheritdoc
         */
        public form?: Form<any> | undefined;
        //#endregion


        //#region constructor

        //#endregion


        //#region events
        //#endregion

        //#region methods
        protected selectInternalOption() {
            if(!this.isConnected) return;

            let oneFound = false;
            for(let option of this.options) {
                if(option.value == this.value) {
                    if(this.optionSelected)
                        this.optionSelected.selected = false;
                    option.selected = true;
                    this.optionSelected = option;
                    oneFound = true;
                }
                else {
                    option.selected = false;
                }
            }
            if(!oneFound) {
                this.optionSelected = undefined;
            }
        }

        @Internal()
        public selectOption(option: ItemBoxOption) {
            this.value = option.value;
            this.onChange.trigger([this.value]);
            if(this.formPart) {
                this.formPart.value.set(this.value);
            }
        }

        @Internal()
        public register(option: ItemBoxOption) {
            if(!this.options.includes(option)) {
                this.options.push(option);
                if(option.value == this.value) {
                    if(this.optionSelected) {
                        this.optionSelected.selected = false;
                    }
                    option.selected = true;
                    this.optionSelected = option;
                }
            }
        }

        @Internal()
        public unregister(option: ItemBoxOption) {
            const index = this.options.indexOf(option);
            if(index != -1) {
                this.options.splice(index, 1);
            }
        }

        /**
         * 
         */
        protected removeErrors() {
            this.errors = [];
        }

        protected override postCreation(): void {
            this.selectInternalOption();
        }
        //#endregion

    }
}