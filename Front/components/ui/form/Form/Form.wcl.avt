import { type IFormElement } from "../FormElement/FormElement.wcl.avt";
import type { BodyJSON, FormData } from "./FormType.lib.avt";
import { InternalVirtualForm, type VirtualForm } from "./VirtualForm.lib.avt";

namespace Components {

    export class Form<T extends BodyJSON> extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static
        public static create<T extends BodyJSON>(config: FormData<T>): VirtualForm<T> {
            return new InternalVirtualForm(config) as VirtualForm<T>;
        }
        //#endregion


        //#region props

        //#endregion


        //#region variables

        protected elements: IFormElement[] = [];
        //#endregion


        //#region constructor

        //#endregion

        //#region events
        public onSubmit: Aventus.Callback<() => void> = new Aventus.Callback();
        //#endregion

        //#region methods 

        public registerFormElement(element: IFormElement) {
            if(!this.elements.includes(element)) {
                this.elements.push(element);
            }
        }

        public registerSubmit(element: HTMLElement) {
            new Aventus.PressManager({
                element,
                onPress: () => {
                    this.submit();
                }
            });
        }

        public async submit() {
            if(await this.validate()) {
                this.onSubmit.trigger([]);
            }
        }

        public async validate(): Promise<boolean> {
            let proms: Promise<boolean>[] = [];
            for(let element of this.elements) {
                proms.push(element.validate());
            }

            const result = await Promise.all(proms);
            for(let resultTemp of result) {
                if(!resultTemp) return false;
            }
            return true;
        }
        //#endregion

    }
}