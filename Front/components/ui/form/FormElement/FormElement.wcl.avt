import type { IFormElement, InternalFormPart } from "../Form/FormType.lib.avt";

namespace Components {
    export abstract class FormElement<T> extends Aventus.WebComponent implements Aventus.DefaultComponent, IFormElement<T> {

        //#region static
    
        //#endregion
    
    
        //#region props
        @Attribute()
        protected has_errors!: boolean;
        //#endregion
    
    
        //#region variables
        /**
         * @inheritdoc
         */
        @Watch((target: FormElement<T>) => {
            target.has_errors = target.errors.length > 0;
        })
        public errors: string[] = [];
    
        /**
         * @inheritdoc
         */
        @Watch()
        public value: T | undefined;
    
        private _formPart?: InternalFormPart<T>;
    
        public get formPart(): InternalFormPart<T> | undefined {
            return this._formPart;
        }
        public set formPart(value: InternalFormPart<T> | undefined) {
            this.unlinkFormPart();
            this._formPart = value;
            this.linkFormPart();
        }
        //#endregion
    
    
        //#region constructor
    
        //#endregion
    
        //#region events
        public onChange: Aventus.Callback<(value: T | undefined) => void> = new Aventus.Callback();
        //#endregion
    
        //#region methods
    
        @BindThis()
        protected refreshValueFromForm() {
            if(this._formPart) {
                this.value = this._formPart.value.get();
            }
        }
        protected unlinkFormPart() {
            if(this._formPart) {
                this._formPart.unregister(this);
                this._formPart.onValueChange.remove(this.refreshValueFromForm);
                this._formPart.onValidation.remove(this.onFormValidation);
            }
        }
        protected linkFormPart() {
            if(this._formPart) {
                this._formPart.register(this);
                this._formPart.onValueChange.add(this.refreshValueFromForm);
                this._formPart.onValidation.add(this.onFormValidation);
                this.refreshValueFromForm();
            }
            else {
                this.value = undefined;
            }
        }
    
        @BindThis()
        public onFormValidation(errors: string[]): Aventus.Asyncable<string[]> {
            this.errors = errors;
            return this.errors;
        }
    
        protected override postDestruction(): void {
            super.postDestruction();
            this.unlinkFormPart();
        }
        //#endregion
    
    }
}