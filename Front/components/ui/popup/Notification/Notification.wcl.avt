import type { ColorsType } from "../../../../libs/Style.lib.avt";

namespace Components {
    export type NotificationPosition = 'bottom' | 'top' | 'bottom left' | 'top left' | 'bottom right' | 'top right';
    export type NotificationOptions = {
        position?: NotificationPosition;
        color?: ColorsType,
        title?: string;
        body?: string;
        delay?: number;
        icon?: string;
    };


    export class Notification extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static
        public static create(options: NotificationOptions): Notification {
            let el = new Notification();

            if(options.position) el.position = options.position;
            if(options.color) el.color = options.color;
            if(options.title) el.subject = options.title;
            if(options.body) el.innerHTML = options.body;
            if(options.delay) el.delay = options.delay;
            if(options.icon) el.icon = options.icon;

            return el;
        }
        //#endregion


        //#region props
        @Attribute()
        public position: NotificationPosition = 'top right';
        @Property()
        public icon?: string;
        @Property()
        public subject: string = "";
        @Attribute()
        public color?: ColorsType;
        /**
         * Use minus -1 to have an infinite timer
         */
        @Attribute()
        public delay: number = 2000;

        @Attribute()
        private is_active!: boolean;
        //#endregion


        //#region variables
        public showAsked: boolean = false;
        private onHide: (result: boolean) => void = () => { };
        public timeout: number = 0;
        //#endregion


        //#region constructor

        //#endregion


        //#region methods
        public show(onHide: (result: boolean) => void) {
            this.onHide = onHide;
            if(this.isReady) {
                this.is_active = true;
                this.startDelay();
            }
            else {
                this.showAsked = true;
            }
        }

        protected startDelay() {
            if(this.delay > 0) {
                this.timeout = setTimeout(() => {
                    this.close();
                }, this.delay);
            }
        }
        /**
         * When the user click on the notif, run the callback if exist and close
         */
        protected async clicked() {
            if(this.onHide) {
                this.is_active = false;
                this.onHide(true);
                await Aventus.sleep(420);
                this.remove();
            }
        }
        /**
         * When the user click on the cross, close the notification
         */
        protected async close() {
            if(this.onHide) {
                this.is_active = false;
                this.onHide(false);
                await Aventus.sleep(420);
                this.remove();
            }
        }

        protected override postCreation(): void {
            if(this.showAsked) {
                this.is_active = true;
                this.startDelay();
            }
        }


        //#endregion

    }
}