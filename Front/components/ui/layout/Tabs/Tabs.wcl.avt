import { TabHeader } from "./TabHeader/TabHeader.wcl.avt";
import { Tab } from "./Tab/Tab.wcl.avt";
import type { Scrollable } from "../Scrollable/Scrollable.wcl.avt";

namespace Components {
    export class Tabs<T extends Tab = Tab> extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        private first_active!: boolean;
        @Attribute()
        private last_active!: boolean;
        @Property()
        public header_full_width!: boolean;
        //#endregion


        //#region variables
        protected tabs: { [label: string]: T; } = {};

        @ViewElement()
        protected headerEl!: HTMLDivElement;
        @ViewElement()
        protected bodyEl!: HTMLDivElement;
        @ViewElement()
        protected headerScrollEl!: Scrollable;


        protected activeHeader?: TabHeader<T>;
        //#endregion


        //#region constructor

        //#endregion


        //#region methods

        protected loadTabs() {
            let elements = this.getElementsInSlot();
            let first: TabHeader<T> | null = null;
            for(let element of elements) {
                element.parentElement?.removeChild(element);
                if(element instanceof Tab) {
                    this.tabs[element.label] = element as T;

                    let header = new (this.defineTabHeader())();
                    this.headerEl.appendChild(header);
                    header.init(element as T, this);

                    if(first == null) {
                        first = header;
                    }
                }
            }

            if(first) {
                this.displayActive(first);
            }
        }

        public displayActive(tabHeader: TabHeader<T>) {
            if(this.activeHeader) {
                this.activeHeader.active = false;
                this.activeHeader.tab.parentNode?.removeChild(this.activeHeader.tab);
            }

            this.activeHeader = tabHeader;
            this.activeHeader.active = true;
            this.appendChild(this.activeHeader.tab);
            this.validateCorner();
        }

        protected defineTabHeader(): new (...args: any[]) => TabHeader<T> {
            return TabHeader;
        }

        @BindThis()
        protected validateCorner() {
            this.first_active = this.headerScrollEl.x == 0 && this.activeHeader == this.headerEl.children[0];
            this.last_active = this.headerScrollEl['contentWrapper'].offsetWidth >= this.offsetWidth && this.headerScrollEl.x == this.headerScrollEl['max'].x && this.activeHeader == this.headerEl.children[this.headerEl.children.length - 1];
        }

        protected override postCreation(): void {
            super.postCreation();
            this.headerScrollEl.onScrollChange.add(this.validateCorner);
            this.loadTabs();
        }
        //#endregion

    }
}