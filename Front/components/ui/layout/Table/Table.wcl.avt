import { TableRowHeader } from "./rows/TableRowHeader/TableRowHeader.wcl.avt";
import { TableCell } from "./cells/TableCell/TableCell.wcl.avt";
import { TableRow } from "./rows/TableRow/TableRow.wcl.avt";
import { TableCellBoolean } from "./cells/TableCellBoolean.wc.avt";
import { TableCellString } from "./cells/TableCellString.wc.avt";
import { TableCellPicture } from "./cells/TableCellPicture.wc.avt";
import { TableCellNumber } from "./cells/TableCellNumber.wc.avt";
import { TableCellDate } from "./cells/TableCellDate.wc.avt";
import { TableCellCheckbox } from "./cells/TableCellCheckbox/TableCellCheckbox.wcl.avt";
import type { Scrollable } from "../Scrollable/Scrollable.wcl.avt";

namespace Components {
    export type TableCellType = 'number' | 'string' | 'date' | 'boolean' | 'custom' | 'picture';
    export type TableSchema = {
        displayName: string,
        name?: string,
        type: TableCellType,
        cell?: new () => TableCell<any, any>;
        cellHeader?: new () => TableCell<any, any>;
        width?: number;
        minWidth?: number;
    };
    export type TableOptions<T> = {
        schema: TableSchema[];
        selectable: boolean;
        row: new () => TableRow<T>;
        header: new () => TableRowHeader<T>;
    };

    export type Key<T> = keyof T;

    export type FilterAction<T> = (value: T[Key<T>]) => boolean;

    export abstract class Table<T> extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        public col_resize!: boolean;
        @Property()
        public auto_hide_scroll!: boolean;
        @Property((target: Table<T>) => {
            target.updateGrid();
        })
        protected grid!: boolean;
        /**
         * Define the size when the table must switch to grid
         */
        @Attribute()
        public grid_breakpoint!: number;

        //#endregion


        //#region variables
        @ViewElement()
        protected headerContainer!: Scrollable;
        @ViewElement()
        protected bodyContainer!: Scrollable;
        @ViewElement()
        protected styleWrapper!: HTMLDivElement;


        @Watch((target: Table<T>, action: Aventus.WatchAction, path: string, value: any) => {
            target.render();
        })
        public data?: T[];

        @Watch((target: Table<T>, action: Aventus.WatchAction, path: string, value: any) => {
            target.filterData();
        })
        public rawData?: T[];
        protected options: TableOptions<T>;
        protected filters: { [key: string]: FilterAction<T>[]; } = {};
        protected globalSearchTxt?: string;
        protected rows: TableRow<T>[] = [];
        protected hadGlobalSearch: boolean = false;

        protected rowsSelected: TableRow<T>[] = [];
        protected resizeObserver!: Aventus.ResizeObserver;

        protected getSelectedData(): T[] {
            const result: T[] = [];
            for(let row of this.rowsSelected) {
                result.push(row.data);
            }
            return result;
        }
        //#endregion


        //#region constructor
        constructor() {
            super();
            this.options = this.configure(this.defaultOptions());
            this.normalizeSchema();
            this.auto_hide_scroll = this.autoHideScroll();
        }
        //#endregion


        //#region methods
        protected autoHideScroll() {
            return true;
        }
        public selectRow(row?: TableRow<T>) {
            if(!row) return;
            if(!this.rowsSelected.includes(row)) {
                this.rowsSelected.push(row);
                this.onSelected();
                this.select.trigger([this.getSelectedData()]);
            }
        }
        public unselectRow(row?: TableRow<T>) {
            if(!row) return;
            let index = this.rowsSelected.indexOf(row);
            if(index != -1) {
                this.rowsSelected.splice(index, 1);
                this.onSelected();
                this.select.trigger([this.getSelectedData()]);
            }
        }
        public unselectAllRows() {
            this.rowsSelected = [];
            this.onSelected();
            this.select.trigger([[]]);
        }

        public select: Aventus.Callback<(data: T[]) => void> = new Aventus.Callback();
        /**
         * Trigger when a row is selected
         */
        protected onSelected() {

        }

        protected syncScroll() {
            this.headerContainer?.onScrollChange.add((x, y) => {
                if(this.bodyContainer?.x != x) {
                    this.bodyContainer?.scrollX(x);
                }
            });
            this.bodyContainer?.onScrollChange.add((x, y) => {
                if(this.headerContainer?.x != x) {
                    this.headerContainer?.scrollX(x);
                }
            });
        }

        protected normalizeSchemaCell(cellConfig: TableSchema): void {
            if(!cellConfig.cell) {
                if(cellConfig.type == "boolean") cellConfig.cell = TableCellBoolean;
                else if(cellConfig.type == "date") cellConfig.cell = TableCellDate;
                else if(cellConfig.type == "number") cellConfig.cell = TableCellNumber;
                else if(cellConfig.type == "picture") cellConfig.cell = TableCellPicture;
                else if(cellConfig.type == "string") cellConfig.cell = TableCellString;
                else if(cellConfig.type == "custom") cellConfig.cell = TableCellString;
            }
        }
        protected normalizeSchema(): void {
            for(let cellConfig of this.options.schema) {
                this.normalizeSchemaCell(cellConfig);
            }

            if(this.options.selectable) {
                this.options.schema.splice(0, 0, {
                    displayName: "",
                    name: "",
                    type: "custom",
                    cell: TableCellCheckbox,
                    width: 50
                });
            }
        }
        protected defaultOptions(): TableOptions<T> {
            return {
                schema: [],
                selectable: false,
                header: TableRowHeader,
                row: TableRow
            };
        }
        /**
         * Define the schema needed for the table
         */
        protected abstract configure(options: TableOptions<T>): TableOptions<T>;

        public setColWidth(width: number, i: number) {
            this.styleWrapper?.style.setProperty("--_table-cell-width-" + (i + 1), width + "px");
            this.styleWrapper?.style.setProperty("--_table-cell-weight-" + (i + 1), "0");
        }
        public setColMinWidth(width: number, i: number) {
            this.styleWrapper?.style.setProperty("--_table-cell-min-width-" + (i + 1), width + "px");
        }
        protected sortData(data: T[]): T[] {
            return data;
        }
        protected filterData() {
            let result: T[] = [];
            if(this.rawData) {
                for(let item of this.rawData) {
                    let isOk = true;
                    for(let name in this.filters) {
                        let value = item[name];
                        let filters = this.filters[name];
                        for(let filter of filters) {
                            if(!filter(value)) {
                                isOk = false;
                                break;
                            }
                        }
                    }
                    if(isOk) {
                        result.push(item);
                    }
                }
            }
            result = this.sortData(result);
            this.data = result;
        }
        protected render() {
            if(!this.headerContainer || !this.bodyContainer) {
                return;
            }
            for(let i = 0; i < this.options.schema.length; i++) {
                const width = this.options.schema[i].width;
                if(width) {
                    this.setColWidth(width, i);
                }

                const minWidth = this.options.schema[i].minWidth;
                if(minWidth) {
                    this.setColMinWidth(minWidth, i);
                }
            }
            let nbCol = this.options.schema.length ? this.options.schema.length : 1;
            this.styleWrapper?.style.setProperty("--_table-nb-column", nbCol + "");

            let header = new this.options.header();
            header.table = this;
            header.init(this.options);
            this.headerContainer.innerHTML = "";
            this.headerContainer.appendChild(header);

            for(let row of this.rows) {
                row.remove();
            }
            this.bodyContainer.innerHTML = "";
            this.rows = [];
            this.hadGlobalSearch = false;
            if(this.data) {
                for(let item of this.data) {
                    let row = new this.options.row();
                    row.table = this;
                    row.grid = this.grid;
                    row.init(this.options, item);
                    this.rows.push(row);
                    this.bodyContainer.appendChild(row);
                }
            }
            this.globalSearch();
        }


        protected globalSearch() {
            let search = this.globalSearchTxt?.trim().toLowerCase();
            if(search) {
                this.hadGlobalSearch = true;
                for(let row of this.rows) {
                    row.hide = !row.globalSearch(search);
                }
            }
            else if(this.hadGlobalSearch) {
                this.hadGlobalSearch = false;
                for(let row of this.rows) {
                    row.hide = false;
                }
            }
        }

        public globalFilter(txt: string) {
            this.globalSearchTxt = txt;
            this.globalSearch();
        }
        public addFilter<U extends keyof T>(name: U, action: (value: T[U]) => boolean) {
            let nameTxt = name as string;
            if(!this.filters[nameTxt]) {
                this.filters[nameTxt] = [];
            }
            else if(this.filters[nameTxt].includes(action)) {
                return;
            }
            this.filters[nameTxt].push(action);
            this.filterData();
        }
        public removeFilter<U extends keyof T>(name: U, action: (value: T[U]) => boolean) {
            let nameTxt = name as string;
            if(this.filters[nameTxt]) {
                let index = this.filters[nameTxt].indexOf(action);
                if(index != -1) {
                    this.filters[nameTxt].splice(index, 1);
                }
            }
            this.filterData();
        }
        protected registerObserver() {
            this.resizeObserver = new Aventus.ResizeObserver(() => {
                this.grid = (this.grid_breakpoint != undefined && this.offsetWidth <= this.grid_breakpoint);
            });
            this.resizeObserver.observe(this);
        }

        protected updateGrid() {
            for(const row of this.rows) {
                row.grid = this.grid;
            }
        }

        protected override postCreation(): void {
            this.syncScroll();
            this.registerObserver();
            this.render();
        }

        protected override postDestruction(): void {
            super.postDestruction();
            this.resizeObserver.disconnect();
            for(let row of this.rows) {
                row.remove();
            }
        }
        //#endregion
    }
}