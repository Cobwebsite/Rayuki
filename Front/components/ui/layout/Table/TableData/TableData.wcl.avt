// import { NotificationManager } from "../../Notification/NotificationManager.lib.avt";
// import type { GenericDataModal } from "../../Modal/GenericDataModal/GenericDataModal.wcl.avt";
import { TableDataCellAction } from "./TableDataCellAction.wc.avt";
import { ApplicationStorableState } from "../../../../../libs/ApplicationStateManager.state.avt";
import { Application } from "../../../../system/Application/Application.wcl.avt";
import { Table, type TableSchema } from "../Table.wcl.avt";
import { TableDataCellHeaderAction } from "./TableDataCellHeaderAction.wc.avt";

namespace Components {
    export abstract class TableData<T extends AventusSharp.Data.Storable> extends Table<T> implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        public add_btn!: boolean;
        //#endregion


        //#region variables
        protected application?: Application;
        //#endregion


        //#region constructor

        //#endregion


        //#region methods
        public abstract defineRAM(): Aventus.Ram<T>;
        public abstract defineNewState(): Aventus.State;
        public abstract defineEditState(data: T): Aventus.State;
        public async loadData() {
            let ram = this.defineRAM();
            this.rawData = await this.application?.executeWithLoading(ram.getListWithError());

            ram.onCreated((data) => {
                if(!this.rawData) {
                    this.rawData = [data];
                }
                else {
                    this.rawData.push(data);
                }
            });

            ram.onDeleted((data) => {
                if(!this.rawData) return;
                const index = this.rawData.findIndex(p => p.Id == data.Id);
                if(index != -1) {
                    this.rawData.splice(index, 1);
                }
            });

            ram.onUpdated((data) => {
                if(!this.rawData) {
                    this.rawData = [data];
                }
                else {
                    const index = this.rawData.findIndex(p => p.Id == data.Id);
                    if(index != -1) {
                        this.render();
                    }
                }
            });
        }

        public async newData() {
            let state = this.defineNewState();
            await this.application?.navigate(state);
        }
        public async editData(data: T) {
            let cloneData = data.clone();
            let state = this.defineEditState(cloneData);
            await this.application?.navigate(state);
        }
        public abstract defineDeleteMessage(data: T): string;
        public async deleteData(data: T) {
            const message = this.defineDeleteMessage(data);
            let confirm = await this.application?.confirm({
                title: "Confirmation de suppression",
                description: message
            });
            if(confirm) {
                let ram = this.defineRAM();
                await this.application?.executeWithLoading(ram.deleteWithError(data));
                this.rawData = await this.application?.executeWithLoading(ram.getListWithError());
            }
        }

        protected override normalizeSchemaCell(cellConfig: TableSchema): void {
            super.normalizeSchemaCell(cellConfig);

            if(cellConfig.cellHeader == TableDataCellHeaderAction) {
                this.add_btn = true;
            }
        }


        protected override postCreation(): void {
            super.postCreation();
            this.application = this.findParentByType(Application) ?? undefined;
            this.loadData();
        }
        //#endregion

    }
}