import { TableDataCellHeaderAction } from "./TableDataCellHeaderAction/TableDataCellHeaderAction.wcl.avt";
import { Application } from "../../../../system/Application/Application.wcl.avt";
import { Table, type TableOptions, type TableSchema } from "../Table.wcl.avt";
import { TableRowData } from "./TableRowData/TableRowData.wcl.avt";

namespace Components {
    export type TableDataOptions<T> = TableOptions<T> & {
        /** Set to true if you need a loader */
        showLoading: boolean;
        /** Define the delay before loading data. Usefull to avoid animation freeze */
        delayLoading: number;
    };
    export abstract class TableData<T extends AventusSharp.Data.Storable> extends Table<T, TableDataOptions<T>> implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        public add_btn!: boolean;
        //#endregion


        //#region variables
        protected application?: Application;
        protected ram?: Aventus.Ram<T>;

        //#endregion


        //#region constructor

        //#endregion


        //#region methods
        public abstract defineRAM(): Aventus.Ram<T>;
        public abstract defineNewState(): Aventus.State;
        public abstract defineEditState(data: T): Aventus.State;
        public async loadData() {
            if(this.options.showLoading)
                this.showLoading();

            setTimeout(async () => {
                this.ram = this.defineRAM();
                this.data = await this.application?.executeWithLoading(this.ram.getListWithError());
                this.ram.onCreated(this.onCreatedData);
                this.ram.onUpdated(this.onUpdatedData);
                this.ram.onDeleted(this.onDeletedData);
            }, this.options.delayLoading);
        }

        @BindThis()
        protected onCreatedData(data: T) {
            if(!this.data) {
                this.data = [data];
            }
            else {
                this.data.push(data);
            }
        }

        @BindThis()
        protected onUpdatedData(data: T) {
            if(!this.data) {
                this.data = [data];
            }
            else {
                const index = this.data.findIndex(p => p.Id == data.Id);
                if(index != -1) {
                    this.filterData(true);
                }
            }
        }

        @BindThis()
        protected onDeletedData(data: T) {
            if(!this.data) return;
            const index = this.data.findIndex(p => p.Id == data.Id);
            if(index != -1) {
                this.data.splice(index, 1);
            }
        }

        public async newData(): Promise<void> {
            let state = this.defineNewState();
            await this.application?.navigate(state);
        }
        public async editData(data: T): Promise<void> {
            let cloneData = data.clone();
            let state = this.defineEditState(cloneData);
            await this.application?.navigate(state);
        }
        public abstract defineDeleteMessage(data: T): string;
        public async deleteData(data: T): Promise<void> {
            const message = this.defineDeleteMessage(data);
            let confirm = await this.application?.confirm({
                title: "Confirmation de suppression",
                description: message
            });
            if(confirm) {
                let ram = this.defineRAM();
                await this.application?.executeWithLoading(ram.deleteWithError(data));
                this.data = await this.application?.executeWithLoading(ram.getListWithError());
            }
        }

        protected override normalizeSchemaCell(cellConfig: TableSchema<T>): void {
            super.normalizeSchemaCell(cellConfig);

            if(cellConfig.cellHeader == TableDataCellHeaderAction) {
                this.add_btn = true;
            }
        }

        protected override defaultOptions(): TableDataOptions<T> {
            let result: TableDataOptions<T> = {
                ...super.defaultOptions(),
                showLoading: true,
                delayLoading: 0
            };

            result.row = TableRowData;
            return result;
        }

        protected abstract override configure(options: TableDataOptions<T>): TableDataOptions<T>;


        protected override postCreation(): void {
            super.postCreation();
            this.application = this.findParentByType(Application) ?? undefined;
            this.loadData();
        }

        protected override postDestruction(): void {
            this.ram?.offCreated(this.onCreatedData);
            this.ram?.offUpdated(this.onUpdatedData);
            this.ram?.offDeleted(this.onDeletedData);
        }
        //#endregion

    }
}