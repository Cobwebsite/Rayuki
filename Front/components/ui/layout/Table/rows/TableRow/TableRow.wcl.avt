import type { TableCell } from "../../cells/TableCell/TableCell.wcl.avt";
import { TableCellString } from "../../cells/TableCellString.wc.avt";
import type { Table, TableOptions, TableSchema } from "../../Table.wcl.avt";

namespace Components {
    export class TableRow<T> extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Attribute()
        public hide!: boolean;
        @Property((target: TableRow<T>) => {
            target.updateGrid();
        })
        public grid!: boolean;

        @Attribute()
        private custom_grid!: boolean;
        //#endregion


        //#region variables
        @ViewElement()
        protected rowContentEl!: HTMLDivElement;

        public table?: Table<T>;

        protected _data!: T;

        public get data(): T {
            return this._data;
        }

        protected cells: TableCell<any, T>[] = [];

        //#endregion


        //#region constructor
        public constructor() {
            super();
            this.custom_grid = this.customGridTemplate();
        }
        //#endregion


        //#region methods
        protected customGridTemplate(): boolean {
            return false;
        }
        public init(options: TableOptions<T>, data: T) {
            this._data = data;
            let i = 0;
            this.cells = [];
            for(let cellConfig of options.schema) {
                let cst = cellConfig.cell ?? TableCellString;
                let cell = new cst();
                cell.index = i;
                cell.row = this;
                cell.data = data;
                cell.label = cellConfig.name;
                cell.grid = this.grid;
                const v = cellConfig.name ? Aventus.getValueFromObject(cellConfig.name, data) : undefined
                cell.setContent(v, data);
                this.rowContentEl.appendChild(cell);
                this.cells.push(cell);
                i++;
            }
        }

        public globalSearch(search: string): boolean {
            for(let cell of this.cells) {
                if(cell.globalSearch(search)) {
                    return true;
                }
            }
            return false;
        }

        protected updateGrid() {
            for(const cell of this.cells) {
                cell.grid = this.grid;
            }
        }

        protected override postDestruction(): void {
            super.postDestruction();
            for(let cell of this.cells) {
                cell.remove();
            }
        }
        //#endregion
    }
}