import type { TableCell } from "../../cells/TableCell/TableCell.wcl.avt";
import { TableCellString } from "../../cells/TableCellString.wc.avt";
import type { SortColumns, Table, TableOptions, TableSchema } from "../../Table.wcl.avt";

namespace Components {
    export class TableRow<T> extends Aventus.WebComponent implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props
        @Property((target: TableRow<T>) => {
            target.updateGrid();
        })
        public grid!: boolean;

        @Attribute()
        private custom_grid!: boolean;
        //#endregion


        //#region variables
        @ViewElement()
        protected rowContentEl!: HTMLDivElement;

        public table?: Table<T>;

        protected _data!: T;

        public get data(): T {
            return this._data;
        }

        protected cells: { [displayName: string]: TableCell<any, T>; } = {};
        protected options!: TableOptions<T>;
        //#endregion


        //#region constructor
        public constructor() {
            super();
            this.custom_grid = this.customGridTemplate();
        }
        //#endregion


        //#region methods
        protected customGridTemplate(): boolean {
            return false;
        }

        protected getCell(cellConfig: TableSchema): new (...args) => TableCell<any> {
            return cellConfig.cell ?? TableCellString;
        }

        protected getContent(cellConfig: TableSchema, data: T): any {
            return cellConfig.name ? Aventus.getValueFromObject(cellConfig.name, data) : undefined;
        }
        protected addCellOption(cell: TableCell<any>, cellConfig: TableSchema, data: T): void {

        }

        public init(options: TableOptions<T>, data: T) {
            this.options = options;
            this._data = data;
            let i = 0;
            this.cells = {};
            for(let cellConfig of options.schema) {
                let cst = this.getCell(cellConfig);
                let cell = new cst();
                cell.index = i;
                cell.row = this;
                cell.data = data;
                cell.label = cellConfig.name;
                cell.grid = this.grid;
                this.addCellOption(cell, cellConfig, data);
                const v = this.getContent(cellConfig, data);
                cell.setContent(v, data);
                this.rowContentEl.appendChild(cell);
                this.cells[cellConfig.displayName] = cell;
                i++;
            }
        }

        public globalSearch(search: string): boolean {
            for(let name in this.cells) {
                if(this.cells[name].globalSearch(search)) {
                    return true;
                }
            }
            return false;
        }

        public sort(row: TableRow<T>, column: string, order: 'asc' | 'desc'): number {
            let cell = this.cells[column];
            let cellRow = row.cells[column];

            if(!cell || !cellRow) return 0;

            let result = cell.sortAsc(cellRow);
            if(order == 'desc')
                result *= -1;
            return result;
        }

        protected updateGrid() {
            for(let name in this.cells) {
                this.cells[name].grid = this.grid;
            }
        }

        protected override postDestruction(): void {
            super.postDestruction();
            for(let name in this.cells) {
                this.cells[name].remove();
            }
        }
        //#endregion
    }
}