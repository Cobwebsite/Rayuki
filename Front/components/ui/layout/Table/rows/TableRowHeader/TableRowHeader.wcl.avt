import { TableCellHeader } from "../../cells/TableCellHeader/TableCellHeader.wcl.avt";
import type { TableCell } from "../../cells/TableCell/TableCell.wcl.avt";
import type { TableOptions, TableSchema } from "../../Table.wcl.avt";
import { TableRow } from "../TableRow/TableRow.wcl.avt";

namespace Components {
    export class TableRowHeader<T> extends TableRow<T> implements Aventus.DefaultComponent {

        //#region static

        //#endregion


        //#region props

        //#endregion


        //#region variables
        public override cells: TableCell<any, T>[] = [];
        //#endregion


        //#region constructor

        //#endregion


        //#region methods

        protected override async setCellContent(cell: TableCell<any, T>, cellConfig: TableSchema<T>, data: T): Promise<void> {
            await cell.setContent(cellConfig.displayName, data);
        }

        protected override async addCellOption(cell: TableCell<any, any>, cellConfig: TableSchema<T>, data: T): Promise<void> {
            if(cell instanceof TableCellHeader) {
                if(cellConfig.sortable !== undefined) {
                    cell.sortable = cellConfig.sortable;
                }
                else {
                    cell.sortable = this.options.sortable;
                }
            }
        }

        protected override getCell(cellConfig: TableSchema<T>): new (...args: any[]) => TableCell<any, any> {
            return cellConfig.cellHeader ?? TableCellHeader;
        }

        public override async init(options: TableOptions<T>, data?: T) {
            await super.init(options, data as T);
        }

        //#endregion

    }
}