import { MainEndPoint } from "../generated/Websocket/MainEndPoint.lib.avt";

namespace Lib {
    export type DeviceType = "pc" | "tablet" | "mobile";

    export class Platform {

        public static readonly onScreenChange: Aventus.Callback<(type: DeviceType) => void> = new Aventus.Callback();

        public static init() {
            let currentDevice = this.device;
            let screenObserver = new Aventus.ResizeObserver(() => {
                let newDevice = this.device;
                if(currentDevice != newDevice) {
                    currentDevice = newDevice;
                    this.onScreenChange.trigger([newDevice]);
                }
            });
            screenObserver.observe(document.body);

            const wsInstance = MainEndPoint.getInstance();
            wsInstance.onOpen.add(() => {
                if(!this._isConnected) {
                    this._isConnected = true;
                    this.onReconnect.trigger([]);
                }
            });
            wsInstance.onClose.add(() => {
                if(this._isConnected) {
                    this._isConnected = false;
                    this.onDisconnect.trigger([]);
                }
            });
        }

        public static onScreenChangeAndRun(cb: (type: DeviceType) => void) {
            this.onScreenChange.add(cb);
            cb(this.device);
        }

        public static get device(): DeviceType {
            if(document.body.offsetWidth > 1224) {
                return "pc";
            }
            else if(document.body.offsetWidth > 768) {
                return "tablet";
            }
            return "mobile";
        }

        public static get isStandalone(): boolean {
            if("standalone" in window.navigator && window.navigator.standalone) {
                return true;
            }
            return false;
        }

        public static get isiOS(): boolean {
            let test1 = /iphone|ipad|ipod/.test(
                window.navigator.userAgent.toLowerCase()
            );
            let test2 = navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
            return test1 || test2;
        }

        public static getRatio(element: HTMLElement): string {
            return element.offsetWidth + " / " + element.offsetHeight;
        }

        private static _isConnected: boolean = true;
        public static get isConnected(): boolean {
            return MainEndPoint.getInstance().isReady();
        }
        public static readonly onDisconnect: Aventus.Callback<() => void> = new Aventus.Callback();
        public static readonly onReconnect: Aventus.Callback<() => void> = new Aventus.Callback();
    }
}