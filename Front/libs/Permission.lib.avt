import { PermissionRouter } from "../generated/Routes/PermissionRouter.lib.avt";
import { CoreRouter } from "../generated/CoreRouter.lib.avt";

namespace Permissions {
    @Storybook({
        export: 'protected'
    })
    export interface IPermissionQuery {
        $type?: string,
        value?: number | string,
        additionalInfo?: string;
    }
    @Storybook({
        export: 'protected'
    })
    export class Permission {

        private static saved: { [key: string]: boolean; } = {};

        public static async can(query: IPermissionQuery): Promise<boolean> {
            if(!query.additionalInfo) {
                query.additionalInfo = "";
            }

            let key = query.$type + "$" + query.value + "$" + query.additionalInfo;
            if(Object.keys(this.saved).includes(key)) {
                return this.saved[key];
            }

            let response = await new PermissionRouter().Can({ permissionQuery: query });
            if(response.success && response.result !== undefined) {
                this.saved[key] = response.result;
                return this.saved[key];
            }
            else {
                console.log(response.errors);
            }

            return false;
        }

        public static clear() {
            this.saved = {};
        }
    }

    @Storybook({
        export: 'protected'
    })
    export abstract class PermissionQuery<T extends Aventus.Enum> implements IPermissionQuery {
        public $type?: string;
        public value?: string | number;
        public additionalInfo?: string;

        public constructor(value: Aventus.EnumValue<T>, additionalInfo?: string) {
            this.$type = this.constructor['Fullname'];
            this.value = value;
            this.additionalInfo = additionalInfo;
        }
    }
}

