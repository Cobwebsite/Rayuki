import { isArray } from "Univer@Main:UniverEngineRender.package.avt";
import { TransactionManager } from "../libs/TransactionManager.lib.avt";
import type { VoidWithError } from "Aventus@Main:Aventus.package.avt";

namespace RAM {
    type RamWithTransactionInjector<T extends AventusSharp.Data.Storable> = {
        records: Map<number, Aventus.RamItem<T>>;
        beforeRecordSet: (item: Aventus.RamItem<T>) => Promise<void>;
        beforeRecordDelete: (item: Aventus.RamItem<T>) => Promise<void>,
        addOrUpdateData: (item: Aventus.KeysObject<T>, result: Aventus.ResultWithError<Aventus.RamItem<T>>) => Promise<void>;
        publish(type: 'created' | 'updated' | 'deleted', data: Aventus.RamItem<T>): void;
    };
    export class RamWithTransaction<T extends AventusSharp.Data.Storable> {

        protected readonly memoryUpdateDelete: Map<number, T> = new Map();
        protected readonly memoryCreate: Map<number, Aventus.RamItem<T>> = new Map();
        protected memoryId: number[] = [];
        protected isTransactionActive: boolean = false;
        protected ram: RamWithTransactionInjector<T>;

        public constructor(ram: RamWithTransactionInjector<T>) {
            this.ram = ram;

            this.onTransactionBegin = this.onTransactionBegin.bind(this);
            this.onTransactionEnd = this.onTransactionEnd.bind(this);
            this.beforeRecordDelete = this.beforeRecordDelete.bind(this);
            this.beforeRecordSet = this.beforeRecordSet.bind(this);

            TransactionManager.onTransactionBegin.add(this.onTransactionBegin);
            TransactionManager.onTransactionEnd.add(this.onTransactionEnd);
            ram.beforeRecordDelete = this.beforeRecordDelete;
            ram.beforeRecordSet = this.beforeRecordSet;
        }


        protected onTransactionBegin() {
            this.isTransactionActive = true;
        }
        protected async onTransactionEnd(success: boolean): Promise<void> {
            this.isTransactionActive = false;
            if(!success) {
                // if not success rollback
                for(const [id, item] of this.memoryUpdateDelete) {
                    let resultTemp: Aventus.ResultRamWithError<Aventus.RamItem<T>> = new Aventus.ResultRamWithError();
                    // reset deleted or updated element
                    let type: 'updated' | 'created' = this.ram.records.has(id) ? 'updated' : 'created';
                    await this.ram.addOrUpdateData(item, resultTemp);
                    if(resultTemp.result)
                        this.ram.publish(type, resultTemp.result);
                }
                this.memoryUpdateDelete.clear();
                for(const [id, item] of this.memoryCreate) {
                    this.ram.records.delete(id);
                    this.ram.publish('deleted', item);
                }
                this.memoryCreate.clear();
                this.memoryId = [];
            }
        }

        protected async beforeRecordSet(item: Aventus.RamItem<T>): Promise<void> {
            if(this.isTransactionActive) {
                // save only first time change
                if(this.memoryId.includes(item.Id)) return;
                this.memoryId.push(item.Id);

                if(this.ram.records.has(item.Id)) {
                    this.memoryUpdateDelete.set(item.Id, item.clone());
                }
                else {
                    this.memoryCreate.set(item.Id, item);
                }
            }
        }

        protected async beforeRecordDelete(item: Aventus.RamItem<T>): Promise<void> {
            if(this.isTransactionActive) {
                // save only first time change
                if(this.memoryId.includes(item.Id)) return;
                this.memoryId.push(item.Id);

                this.memoryUpdateDelete.set(item.Id, item.clone());
            }
        }
    }

    type NumberKeys<T> = {
        [K in keyof T]: T[K] extends number ? K : never;
    }[keyof T];

    type KeysOfType<T, U> = {
        [K in keyof T]: NonNullable<T[K]> extends U ? K : never;
    }[keyof T];

    type ItemField<T extends Aventus.IData, U extends Aventus.IData> = {
        id: NumberKeys<T>;
        obj: KeysOfType<T, U>;
        ram: typeof Aventus.Ram<U>;
    };
    export class RamCompletor<T extends AventusSharp.Data.Storable> {

        protected objects: T[] = [];
        protected fields: ItemField<T, any>[] = [];
        protected error?: VoidWithError;
        public constructor(objects?: T | T[], error?: VoidWithError) {
            if(!objects) {
                objects = [];
            }
            else if(!Array.isArray(objects)) {
                objects = [objects];
            }
            this.objects = objects;
            this.error = error;
        }

        public add<U extends Aventus.IData>(field: ItemField<T, U>): RamCompletor<T> {
            this.fields.push(field);
            return this;
        }

        public async run(): Promise<Aventus.VoidWithError> {
            const objects = this.objects;
            const fields = this.fields;
            const result: Aventus.VoidWithError = new Aventus.VoidWithError();

            if(objects.length == 0) return result;

            const listIds: { [obj: string]: number[]; } = {};
            const mapRecords: { [obj: string]: { [id: string]: T[]; }; } = {};

            for(let field of fields) {
                let objKey = field.obj as string;
                let idKey = field.id as string;
                listIds[objKey] = [];
                mapRecords[objKey] = {};

                for(let value of objects) {
                    if(value[idKey]) {
                        const listId = listIds[objKey];
                        const mapRecord = mapRecords[objKey];
                        if(value[objKey]) continue;

                        if(!listId.includes(value[idKey]))
                            listId.push(value[idKey]);
                        if(!mapRecord[value[idKey]]) {
                            mapRecord[value[idKey]] = [];
                        }
                        mapRecord[value[idKey]].push(value);
                    }
                }
            }

            for(let field of fields) {
                let objKey = field.obj as string;
                if(!listIds[objKey] || !mapRecords[objKey]) continue;

                const listId = listIds[objKey];
                const mapRecord = mapRecords[objKey];
                if(listId.length > 0) {
                    const ram = Aventus.Instance.get(field.ram);
                    const query = await ram.getByIdsWithError(listId);
                    if(query.success && query.result) {
                        for(let item of query.result) {
                            if(mapRecord[item.Id]) {
                                for(let record of mapRecord[item.Id]) {
                                    record[objKey] = item;
                                }
                            }
                        }
                    }
                    else {
                        result.errors = [...result.errors, ...query.errors];
                        if(this.error) {
                            this.error.errors = [...this.error.errors, ...query.errors];
                        }
                    }
                }
            }

            return result;
        }
    }


    export abstract class RamHttp<T extends AventusSharp.Data.Storable> extends AventusSharp.RAM.RamHttp<T> {

        public constructor() {
            super();
            new RamWithTransaction(this as unknown as RamWithTransactionInjector<T>);
        }

        public complete(objects?: T | T[], error?: VoidWithError): RamCompletor<T> {
            return new RamCompletor(objects, error);
        }
    }

    export abstract class RamWebSocket<T extends AventusSharp.Data.Storable> extends AventusSharp.RAM.RamWebSocket<T> {

        public constructor() {
            super();
            new RamWithTransaction(this as unknown as RamWithTransactionInjector<T>);
        }

        public complete(objects?: T | T[], error?: VoidWithError): RamCompletor<T> {
            return new RamCompletor(objects, error);
        }
    }
}