import { ApplicationFormState } from "./ApplicationState.state.avt";

namespace State {
    export abstract class CreateOrUpdate<T extends AventusSharp.Data.Storable> extends ApplicationFormState<Partial<T>> implements Aventus.IState {

        private static _state: string = "";
        public static get state(): string {
            if(this._state == "") {
                let cst = this as any;
                // if the state is not defined we must create it
                new cst();
            }
            return this._state;
        }

        public override get item(): T {
            return this._form.item as T;
        }
        public override set item(item: T) {
            this._form.item = item;
        }

        public constructor(item?: T) {
            super();
            this.constructor['_state'] = this.genericState();
            this.item = item ?? this.newElement();
        }

        /**
         * @inheritdoc
         */
        public override get name(): string {
            const id = this.item?.Id ?? 0;
            return this.genericState().replace("{id:number}", id + "");
        }

        private genericState() {
            return `/${this.defineObjectName().toLowerCase()}/{id:number}`;
        }

        protected abstract defineRAM(): Aventus.Ram<T>;

        protected abstract defineObjectName(): string;

        public abstract newElement(): T;

        /**
         * This will validate the form and save the model though the ram
         * 
         * Errors are deals by this method. If success, result !== undefined
         */
        public async save(): Promise<T | undefined> {
            if(!this.item) return;

            let result: T | undefined;
            const validationResult = await this.validate();
            
            if(validationResult === true) {
                let ramResult: Aventus.ResultRamWithError<Aventus.RamItem<T>> | null;
                if(this.item.Id == 0) {
                    ramResult = await this.application.showLoading(this.defineRAM().createWithError(this.item));
                }
                else {
                    ramResult = await this.application.showLoading(this.defineRAM().updateWithError(this.item));
                }

                if(ramResult == null) {
                    return undefined;
                }

                if(ramResult.errors.length > 0) {
                    let noPrintErrors: Aventus.GenericError[] = [];
                    const elements = this._form.elements;
                    for(let error of ramResult.errors) {
                        if(error.details) {
                            let found = false;
                            for(let detail of error.details) {
                                if(detail instanceof AventusSharp.Data.FieldErrorInfo) {
                                    if(elements[detail.Name]) {
                                        for(const element of elements[detail.Name]) {
                                            element.errors.push(error.message);
                                        }
                                        found = true;
                                        break;
                                    }
                                }
                            }
                            if(found) {
                                continue;
                            }
                        }

                        noPrintErrors.push(error);
                    }
                    ramResult.errors = noPrintErrors;
                }
                return await this.application.parseErrors(ramResult);
            }

            return result;
        }
        public back() {
            const splitted = this.name.split("/");
            splitted.pop();
            this.application.navigate(splitted.join("/"));
        }
        public cancel() {
            this.back();
        }
    }
}