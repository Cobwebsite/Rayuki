import type { Application } from "../components/system/Application/Application.wcl.avt";
import type { ApplicationQueryFctResult } from "../components/system/Application/ApplicationError.lib.avt";
import type { FormPart, FormSchema, InternalForm, VirtualFormConfig } from "../components/ui/form/Form/FormType.lib.avt";
import { VirtualForm } from "../components/ui/form/Form/VirtualForm.lib.avt";
import type { ApplicationStateManager } from "../libs/ApplicationStateManager.state.avt";

namespace State {
    export type Field<T> = keyof T;
    export type Fields<T> = (keyof T)[];

    @Convertible()
    export abstract class ApplicationState extends Aventus.State implements Aventus.IState {
        /**
         * The current namespace
         */
        public static readonly Namespace: string = "";
        /**
         * Get the unique type for the data. Define it as the namespace + class name
         */
        public static get Fullname(): string { return this.Namespace + "." + this.name; }


        public readonly $type: string;
        private __manager!: ApplicationStateManager;

        protected get application(): Application {
            return this.__manager.application;
        };

        private __canSaveState: boolean = true;

        public enableSaveState() {
            this.__canSaveState = true;
        }
        public disableSaveState() {
            this.__canSaveState = false;
        }

        private canSync(): boolean {
            if(!this.__canSaveState || !this.__manager) return false;

            return true;
        }

        public constructor() {
            super();
            this.$type = this.constructor['Fullname'];
        }

        public setManager(manager: ApplicationStateManager) {
            this.__manager = manager;
        }


        private delaySaveState: number = 0;
        public saveState() {
            if(!this.canSync()) return;
            clearTimeout(this.delaySaveState);
            this.delaySaveState = setTimeout(() => {
                this.__manager.save();
            }, 500);
        }

        public override async activate(): Promise<boolean> {
            return super.activate(this.__manager);
        }

        /**
         * Override this tell which field must by sync
         */
        protected syncField(addField: (field: Field<this>) => void): void {
        }

        /**
         * Override this tell which field must by sync
         */
        protected syncFieldNoCheck(addField: (field: string) => void): void {
        }

        private runSyncField(): string[] {
            const result: string[] = ["$type"];
            const addField = (field: Field<this> | string) => {
                result.push(field as string);
            };
            this.syncField(addField);
            this.syncFieldNoCheck(addField);
            return result;
        }

        public toJSON() {
            const fields = this.runSyncField();
            return Aventus.Json.classToJson(this, {
                isValidKey: (key) => {
                    return fields.includes(key);
                }
            });
        }

        public copyValues<T extends ApplicationState>(src: T) {
            const fields = this.runSyncField();
            Aventus.Converter.copyValuesClass<ApplicationState>(this, src, {
                isValidKey: (key) => {
                    return fields.includes(key);
                }
            });
        }
    }

    @Internal()
    export class ApplicationEmptyState extends ApplicationState implements Aventus.IState {

        private localName: string;

        public constructor(stateName: string) {
            super();
            this.localName = stateName;
        }

        protected override syncFieldNoCheck(addField: (field: string) => void): void {
            addField("localName");
        }

        /**
         * @inheritdoc
         */
        public override get name(): string {
            return this.localName;
        }
    }
    export abstract class ApplicationWatchState extends ApplicationState implements Aventus.IState {

        private __watcher: any;

        public get watcher(): any {
            return this.__watcher;
        }

        public constructor() {
            super();
            this.onWatcherChanged = this.onWatcherChanged.bind(this);
            this.__watcher = Aventus.Watcher.get({}, this.onWatcherChanged);
        }

        protected async onWatcherChanged(action: Aventus.WatchAction, path: string, value: any) {

        }
    }
    export abstract class ApplicationFormState<T> extends ApplicationState implements Aventus.IState {

        protected _form: VirtualForm<T>;

        public get form(): InternalForm<T> {
            return this._form.parts!;
        }

        public get item(): T | undefined {
            return this._form.item;
        }
        public set item(item: T | undefined) {
            this._form.item = item;
        }

        public constructor() {
            super();

            this._form = new VirtualForm();
            this._form.setForm(this.defineForm());
            this._form.init(this.configureForm(this.defaultConfigureForm()));
            this._onItemChange = this._onItemChange.bind(this);
            this._form.onItemChange.add(this._onItemChange);
        }

        private _onItemChange(action: Aventus.WatchAction, path: string, value: any) {
            this.saveState();
            this.onItemChange(action, path, value);
        }
        protected onItemChange(action: Aventus.WatchAction, path: string, value: any) {

        }

        protected abstract defineForm(): FormSchema<T>;
        private defaultConfigureForm(): VirtualFormConfig {
            return {
                handleValidateNoInputError: (errors) => {
                    this.application.alert({
                        title: "Erreur de validation",
                        description: Object.values(errors).flat().join("<br>")
                    });
                },
                handleExecuteNoInputError: (errors) => {
                    //this.application.popupErrors(errors);
                }
            };
        }
        protected abstract configureForm(config: VirtualFormConfig): VirtualFormConfig;

        protected override syncField(addField: (field: keyof this) => void): void {
            super.syncField(addField);
            addField("item");
        }

        public validate(key?: string): Promise<boolean> {
            return this._form.validate(key);
        }

        public async execute<X>(query: Aventus.Asyncable<ApplicationQueryFctResult<X>>): Promise<ApplicationQueryFctResult<X> | Awaited<X> | undefined> {
            const queryResult = await this._form.execute(query);
            return await this.application.parseErrors(queryResult);
        }

        public addFormEntry(name: string, part: FormPart): void {
            this._form.addFormEntry(name, part);
        }

        public removeFormEntry(name: string): void {
            this._form.removeFormEntry(name);
        }

    }
}