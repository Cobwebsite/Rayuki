import { ApplicationData } from '../../Data/ApplicationData.data.avt';
import { Body, ApplicationTestEvent } from '../Events/ApplicationTestEvent.lib.avt';

namespace Websocket.Routes {

	export class ApplicationRouter extends AventusSharp.WebSocket.Route {
		
		public events: {
			GetAll2: ApplicationRouter_GetAll2,
			GetAll3: ApplicationRouter_GetAll3,
			GetAll5: ApplicationTestEvent,
		}
		
		public constructor(endpoint: AventusSharp.WebSocket.EndPoint) {
			super(endpoint);
			this.events = {
				GetAll2: new ApplicationRouter_GetAll2(endpoint, this.getPrefix),
				GetAll3: new ApplicationRouter_GetAll3(endpoint, this.getPrefix),
				GetAll5: new ApplicationTestEvent(endpoint, this.getPrefix),
			};
			
			for(let key in this.events) {
				this.events[key].init();
			}
		}

		public async GetAll2(options: AventusSharp.WebSocket.WsRouteSendOptions = {}): Promise<AventusSharp.ExtractResponse<ApplicationRouter_GetAll2>> {
			const info: AventusSharp.WebSocket.SocketSendMessageOptions = {
				channel: `${this.getPrefix()}/application2`,
				...options,
			};
			return await this.endpoint.sendMessageAndWait<AventusSharp.ExtractResponse<ApplicationRouter_GetAll2>>(info);
		}

		public async GetAll3(body: { userId: number } | FormData, options: AventusSharp.WebSocket.WsRouteSendOptions = {}): Promise<AventusSharp.ExtractResponse<ApplicationRouter_GetAll3>> {
			const info: AventusSharp.WebSocket.SocketSendMessageOptions = {
				channel: `${this.getPrefix()}/application3`,
				body: body,
				...options,
			};
			return await this.endpoint.sendMessageAndWait<AventusSharp.ExtractResponse<ApplicationRouter_GetAll3>>(info);
		}

		public async GetAll4(options: AventusSharp.WebSocket.WsRouteSendOptions = {}): Promise<Aventus.VoidWithError<Aventus.GenericError<number>>> {
			const info: AventusSharp.WebSocket.SocketSendMessageOptions = {
				channel: `${this.getPrefix()}/application4`,
				...options,
			};
			return await this.endpoint.sendMessage(info);
		}

		public async GetAll5(options: AventusSharp.WebSocket.WsRouteSendOptions = {}): Promise<AventusSharp.ExtractResponse<ApplicationTestEvent>> {
			const info: AventusSharp.WebSocket.SocketSendMessageOptions = {
				channel: `${this.getPrefix()}/getall5`,
				...options,
			};
			return await this.endpoint.sendMessageAndWait<AventusSharp.ExtractResponse<ApplicationTestEvent>>(info);
		}
	}
	 
	export class ApplicationRouter_GetAll2 extends AventusSharp.WebSocket.Event<ApplicationData[]> {
		
		/**
		 * @inheritdoc
		 */
		protected override path(): string {
			return `${this.getPrefix()}/application2`;
		}
		
		/**
		 * @inheritdoc
		 */
		protected override listenOnBoot(): boolean {
			return true;
		}
	}
	 
	export class ApplicationRouter_GetAll3 extends AventusSharp.WebSocket.Event<ApplicationData[]> {
		
		/**
		 * @inheritdoc
		 */
		protected override path(): string {
			return `${this.getPrefix()}/application3`;
		}
	}

}