import { CoreRouter } from '../CoreRouter.lib.avt';

namespace Routes {

	export class MainRouter extends Aventus.HttpRoute {
		public constructor(router?: Aventus.HttpRouter) {
			super(router ?? new CoreRouter());
		}
		@BindThis()
		public async LoginAction(body: { username: string, password: string } | FormData): Promise<AventusSharp.Tools.ResultWithError<boolean>> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/login`, Aventus.HttpMethod.POST);
			request.setBody(body);
			type TypeResult = boolean;
			return await request.queryJSON<TypeResult>(this.router);
		}

		@BindThis()
		public async Logout(): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/logout`, Aventus.HttpMethod.POST);
			return await request.queryVoid(this.router);
		}

		@BindThis()
		public async VapidPublicKey(): Promise<AventusSharp.Tools.ResultWithError<string>> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/vapidPublicKey`, Aventus.HttpMethod.GET);
			type TypeResult = string;
			return await request.queryJSON<TypeResult>(this.router);
		}

		@BindThis()
		public async Register(body: { subscription: PushSubscription } | FormData): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/register`, Aventus.HttpMethod.POST);
			request.setBody(body);
			return await request.queryVoid(this.router);
		}

		@BindThis()
		public async SendNotification(): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/sendNotification`, Aventus.HttpMethod.GET);
			return await request.queryVoid(this.router);
		}

		@BindThis()
		public async BeginTransaction(body: { ms: number } | FormData): Promise<AventusSharp.Tools.ResultWithError<string>> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/core/transaction/begin`, Aventus.HttpMethod.POST);
			request.setBody(body);
			type TypeResult = string;
			return await request.queryJSON<TypeResult>(this.router);
		}

		@BindThis()
		public async CommitTransaction(body: { guid: string } | FormData): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/core/transaction/commit`, Aventus.HttpMethod.POST);
			request.setBody(body);
			return await request.queryVoid(this.router);
		}

		@BindThis()
		public async RollbackTransaction(body: { guid: string } | FormData): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/core/transaction/rollback`, Aventus.HttpMethod.POST);
			request.setBody(body);
			return await request.queryVoid(this.router);
		}

		@BindThis()
		public async Restart(): Promise<AventusSharp.Tools.VoidWithError> {
			const request = new Aventus.HttpRequest(`${this.getPrefix()}/restart`, Aventus.HttpMethod.GET);
			return await request.queryVoid(this.router);
		}
	}

}